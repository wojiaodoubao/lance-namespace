{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Lance Namespace","text":"<p>Lance Namespace is an open specification on top of the storage-based Lance data format to standardize access to a collection of Lance tables (a.k.a. Lance datasets). It describes how a metadata service like Apache Hive MetaStore (HMS), Apache Iceberg REST Catalog (IRC), Apache Gravitino, Unity Catalog, etc. should store and use Lance tables,  as well as how ML/AI tools and analytics compute engines should integrate with Lance tables.</p>"},{"location":"#why-namespace-not-catalog","title":"Why Namespace not Catalog?","text":"<p>There are many terms used to describe the concept of a container in database systems \u2014 such as namespace, catalog, schema, database, metastore, and metalake.  Among these, namespace and catalog have become the most prominent in modern lakehouse architectures.</p> <p>The term catalog typically implies a hierarchical structure with at least two levels.  For example, Apache Hive uses a catalog \u2192 database \u2192 table model,  while Apache Iceberg\u2019s REST catalog adopts a catalog \u2192 multi-level namespace \u2192 table hierarchy.</p> <p>In contrast, the ML and AI communities tend to favor a flatter organizational model.  It\u2019s common to store datasets in simple directories  and categorize them using flexible systems like tagging, rather than rigid hierarchies.</p> <p>To better support this usage pattern, Lance adopts the term namespace to represent all container concepts  \u2014 including what would traditionally be called a catalog.  With Lance Namespace, we provide a flexible, multi-level namespace abstraction  that allows users to structure and manage Lance datasets in ways that best align with their data organization strategies.</p>"},{"location":"contributing/","title":"Contributing to Lance Namespace","text":""},{"location":"contributing/#repository-structure","title":"Repository structure","text":"Component Language Path Description spec docs/src/spec Lance Namespace Specification Rust Reqwest Client Rust rust/lance-namespace-reqwest-client Generated Rust reqwest client for Lance REST Namespace Python UrlLib3 Client Python python/lance_namespace_urllib3_client Generated Python urllib3 client for Lance REST Namespace Python Lance Namespace Core Python python/lance_namespace Lance Namespace Python Core SDK Java Apache Client Java java/lance-namespace-apache-client Generated Java Apache HTTP client for Lance REST Namespace Java Springboot Server Java java/lance-namespace-springboot-server Generated Java SpringBoot server for Lance REST Namespace Java Lance Namespace Core Java java/lance-namespace-core Lance Namespace Java Core SDK Java Lance Namespace Adapter Java java/lance-namespace-adaptor Lance Namespace adapter server implementation Java Lance Namespace Hive Java java/lance-namespace-hive Java Lance Namespace Apache Hive Metastore Implementation Java Lance Namespace Glue Java java/lance-namespace-glue Java Lance Namespace AWS Glue Data Catalog Implementation Java Lance Namespace LanceDB Java java/lance-namespace-lancedb Java Utilities to use Lance Namespace SDK with LanceDB Cloud &amp; Enterprise"},{"location":"contributing/#install-uv","title":"Install uv","text":"<p>We use uv for development. Make sure it is installed, and run:</p> <pre><code>uv sync --all-packages\n</code></pre>"},{"location":"contributing/#lint","title":"Lint","text":"<p>To ensure the OpenAPI definition is valid, you can use the lint command to check it.</p> <pre><code>make lint\n</code></pre>"},{"location":"contributing/#build","title":"Build","text":"<p>There are 3 commands that is available at top level as well as inside each language folder:</p> <ul> <li><code>make clean</code>: remove all codegen modules</li> <li><code>make gen</code>: codegen and lint all modules (depends on <code>clean</code>)</li> <li><code>make build</code>: build all modules (depends on <code>gen</code>)</li> </ul> <p>You can also run <code>make &lt;command&gt;-&lt;language&gt;</code> to only run the command in the specific language, for example:</p> <ul> <li><code>make gen-python</code>: codegen and lint all Python modules</li> <li><code>make build-rust</code>: build all Rust modules</li> </ul> <p>You can also run <code>make &lt;command&gt;-&lt;language&gt;-&lt;module&gt;</code> inside a language folder to run the command against a specific module, for example:</p> <ul> <li><code>make gen-rust-reqwest-client</code>: codegen and lint the Rust reqwest client module</li> <li><code>make build-java-springboot-server</code>: build the Java Spring Boot server module</li> </ul>"},{"location":"spec/concepts/","title":"Namespace Concepts","text":""},{"location":"spec/concepts/#namespace-definition","title":"Namespace Definition","text":"<p>A Lance namespace is a centralized repository for discovering, organizing, and managing Lance tables. It can either contain a collection of tables, or a collection of Lance namespaces recursively. It is designed to encapsulates concepts including namespace, metastore, database, schema, etc. that frequently appear in other similar data systems to allow easy integration with any system of any type of object hierarchy.</p> <p>Here is an example layout of a Lance namespace:</p> <p></p>"},{"location":"spec/concepts/#parent-child","title":"Parent &amp; Child","text":"<p>We use the term parent and child to describe relationship between 2 objects. If namespace A directly contains B, then A is the parent namespace of B, i.e. B is a child of A. For examples:</p> <ul> <li>Namespace <code>ns1</code> contains a child namespace <code>ns4</code>. i.e. <code>ns1</code> is the parent namespace of <code>ns4</code>.</li> <li>Namespace <code>ns2</code> contains a child table <code>t2</code>, i.e. <code>t2</code> belongs to parent namespace <code>ns2</code>.</li> </ul>"},{"location":"spec/concepts/#root-namespace","title":"Root Namespace","text":"<p>A root namespace is a namespace that has no parent. The root namespace is assumed to always exist and is ready to be connected to by a tool to explore objects in the namespace. The lifecycle management (e.g. creation, deletion) of the root namespace is out of scope of this specification.</p>"},{"location":"spec/concepts/#object-name","title":"Object Name","text":"<p>The name of an object is a string that uniquely identifies the object within the parent namespace it belongs to. The name of any object must be unique among all other objects that share the same parent namespace. For examples:</p> <ul> <li><code>cat2</code>, <code>cat3</code> and <code>cat4</code> are all unique names under the root namespace</li> <li><code>t3</code> and <code>t4</code> are both unique names under <code>cat4</code></li> </ul>"},{"location":"spec/concepts/#object-identifier","title":"Object Identifier","text":"<p>The identifier of an object uniquely identifies the object within the root namespace it belongs to. The identifier of any object must be unique among all other objects that share the same root namespace.</p> <p>Based on the uniqueness property of an object name within its parent namespace, an object identifier is the list of object names starting from (not including) the root namespace to (including) the object itself. This is also called an list style identifier. For examples:</p> <ul> <li>the list style identifier of <code>cat5</code> is <code>[cat2, cat5]</code></li> <li>the list style identifier of <code>t1</code> is <code>[cat2, cat5, t1]</code></li> </ul> <p>The dot (<code>.</code>) symbol is typically used as the delimiter to join all the names to form an string style identifier, but other symbols could also be used if dot is used in the object name. For examples:</p> <ul> <li>the string style identifier of <code>cat5</code> is <code>cat2.cat5</code></li> <li>the string style identifier of <code>t1</code> is <code>cat2.cat5.t1</code></li> <li>the string style identifier of <code>t3</code> is <code>cat4$t3</code> when using delimiter <code>$</code></li> </ul>"},{"location":"spec/concepts/#name-and-identifier-for-root-namespace","title":"Name and Identifier for Root Namespace","text":"<p>The root namespace itself has no name or identifier. When represented in code, its name and string style identifier is represented by an empty or null string, and its list style identifier is represented by an empty or null list.</p> <p>The actual name and identifier of the root namespace is typically assigned by users through some configuration when used in a tool. For example, a root namespace can be called <code>cat1</code> in Ray, but called <code>cat2</code> in Apache Spark, and they are both configured to connect to the same root namespace.</p>"},{"location":"spec/concepts/#object-level","title":"Object Level","text":"<p>The root namespace is always at level 0. This means if an object has list style identifier with list size <code>N</code>,  the object is at the <code>N</code>th level in the entire namespace hierarchy. We also say the object identifier has <code>N</code> levels. For examples, a namespace <code>[ns1, ns2]</code> is at level 2, the identifier <code>ns1.ns2</code> has 2 levels. A table <code>[catalog1, database2, table3]</code> is at level 3, the identifier <code>catalog1.database2.table3</code> has 3 levels.</p>"},{"location":"spec/concepts/#leveled-namespace","title":"Leveled Namespace","text":"<p>If every table in the root namespace are at the same level <code>N</code>, the namespace is called leveled, and we say this namespace is a <code>N</code>-level namespace. For example, a directory namespace is a 1-level namespace, and a Hive 2.x namespace is a 2-level namespace. The example above is not leveled because <code>t1</code> has 2 namespaces <code>ns1</code> and <code>ns4</code> before root, whereas <code>t2</code> has 1 namespace <code>ns2</code> before root.</p>"},{"location":"spec/tools/","title":"Tool Integration Guidelines","text":"<p>Tools refer to all the ML/AI training tools and analytics compute engines that can integrate with Lance tables. The following are guidelines for tools to integrate with Lance namespaces. Note that these are recommendations rather than hard requirements. The goal of these guidelines is to offer a consistent user experience across different tools.</p>"},{"location":"spec/tools/#configuring-the-implementation","title":"Configuring the Implementation","text":"<p>We recommend tools to offer a <code>impl</code> config key that allows user to configure the Namespace implementation. We recommend the following values for the natively supported implementations:</p> Implementation <code>impl</code> Value Directory dir Apache Hive MetaStore hive REST rest"},{"location":"spec/tools/#configuring-an-implementation-details","title":"Configuring an Implementation Details","text":"<p>We recommend tools to offer implementation specific configurations using the <code>impl</code> value as the config key prefix. For example, all config keys for the directory namespace should start with <code>dir.</code>, like <code>dir.path</code>.</p>"},{"location":"spec/impls/","title":"Namespace Implementations","text":"<p>A Lance Namespace Implementation is an implementation of the Lance namespace specification, more specifically:</p> <ol> <li>It satisfies all the Lance namespace definitions and concepts.</li> <li>It declares and implements a list of supported Lance namespace operations.</li> </ol>"},{"location":"spec/impls/#implementation-and-storage","title":"Implementation and Storage","text":"<p>Except for any storage-only implementation (e.g. directory namespace), a Lance table exists both in the storage and the implementation. For example, a Lance table exists both in HMS and storage for the Hive namespace. There are 2 possible ways to manage a Lance table under such setting. A Lance namespace implementation can choose to support one or both:</p>"},{"location":"spec/impls/#implementation-managed-table","title":"Implementation Managed Table","text":"<p>A implementation managed Lance table is a table that is fully managed by the Lance namespace implementation. The implementation must maintain information about the latest version of the Lance table. Any modifications to the table must happen through the implementation. If a user directly modifies the underlying table in the storage bypassing the implementation, the implementation must not reflect the changes in the table to the namespace users.</p> <p>This mode ensures the namespace service is aware of all activities in the table, and can thus fully enforce any governance and management features for the table.</p>"},{"location":"spec/impls/#storage-managed-table","title":"Storage Managed Table","text":"<p>A storage managed Lance table is a table that is fully managed by the storage with a metadata definition in the Lance namespace implementation. The implementation only contains information about the table directory location. It is expected that a tool finds the latest version of the Lance table based on the contents in the table directory according to the Lance format specification. A modification to the table can happen either directly against the storage, or happen as a request to the implementation, where the implementation is responsible for applying the corresponding change to the underlying storage according to the Lance format specification.</p> <p>This mode is more flexible for real world ML/AI workflows but the implementation loses full visibility and control over the actions performed against the table, so it will be harder to enforce any governance and management features for storage managed tables.</p>"},{"location":"spec/impls/#native-implementations","title":"Native Implementations","text":"<p>A native Lance namespace implementation is a Lance Namespace implementation  that is maintained in this <code>lance-namespace</code> repository. Any implementation that is outside the repository is considered as a third-party implementation.</p>"},{"location":"spec/impls/dir/","title":"Lance Directory Namespace","text":"<p>Lance directory namespace is a lightweight and simple 1-level Lance namespace that only contains a list of tables. People can easily get started with creating and using Lance tables directly on top of any local or remote storage system with a Lance directory namespace.</p> <p>A directory namespace maps to a directory on storage, we call such directory a namespace directory. A Lance table corresponds to a subdirectory in the namespace directory that has the format <code>&lt;table_name&gt;.lance</code>. We call such a subdirectory table directory. Consider the following example namespace directory layout:</p> <pre><code>.\n\u2514\u2500\u2500 /my/dir1/\n    \u251c\u2500\u2500 table1.lance/\n    \u2502   \u251c\u2500\u2500 data/\n    \u2502   \u2502   \u251c\u2500\u2500 0aa36d91-8293-406b-958c-faf9e7547938.lance\n    \u2502   \u2502   \u2514\u2500\u2500 ed7af55d-b064-4442-bcb5-47b524e98d0e.lance\n    \u2502   \u251c\u2500\u2500 _versions/\n    \u2502   \u2502   \u2514\u2500\u2500 9223372036854775707.manifest\n    \u2502   \u2514\u2500\u2500 _indices/\n    \u2502       \u2514\u2500\u2500 85814508-ed9a-41f2-b939-2050bb7a0ed5-fts/\n    \u2502           \u2514\u2500\u2500 index.idx \n    \u251c\u2500\u2500 table2.lance\n    \u2514\u2500\u2500 table3.lance\n</code></pre> <p>This describes a Lance directory namespace with the namespace directory at <code>/my/dir1/</code>. It contains tables <code>table1</code>, <code>table2</code>, <code>table3</code> sitting at table directories <code>/my/dirs/table1.lance</code>, <code>/my/dirs/table2.lance</code>, <code>/my/dirs/table3.lance</code> respectively.</p>"},{"location":"spec/impls/dir/#configuration","title":"Configuration","text":"<p>The Lance directory namespace accepts the following configuration properties:</p> Property Required Description Default Example <code>root</code> No The root directory of the namespace where tables are stored Current working directory <code>/my/dir</code>, <code>s3://bucket/prefix</code> <code>storage.*</code> No Storage-specific configuration options <code>storage.region=us-west-2</code>"},{"location":"spec/impls/dir/#root-path","title":"Root Path","text":"<p>There are 3 ways to specify a root path:</p> <ol> <li>URI: a URI that follows the RFC 3986 specification, e.g. <code>s3://mu-bucket/prefix</code>.</li> <li>Absolute POSIX storage path: an absolute file path in a POSIX standard storage, e.g. <code>/my/dir</code>.</li> <li>Relative POSIX storage path: a relative file path in a POSIX standard storage, e.g. <code>my/dir2</code>, <code>./my/dir3</code>.    The absolute path of the root should be derived from the current working directory.</li> </ol>"},{"location":"spec/impls/dir/#storage-options","title":"Storage Options","text":"<p>Properties with the <code>storage.</code> prefix are passed directly to the underlying OpenDAL storage system after removing the prefix. For example, <code>storage.region</code> becomes <code>region</code> when passed to the storage layer. Please visit Apache OpenDAL for more details.</p>"},{"location":"spec/impls/dir/#table-existence","title":"Table Existence","text":"<p>A table exists in a Lance directory namespace if a table directory of the specific name exists and contains a non-empty <code>_versions</code> subdirectory.</p> <p>When checking if a specific table exists or deciding if a table should be listed,  the operation must list objects with the <code>_versions/</code> prefix and checks if any objects exist. If the directory exists but there is no file in the directory, it should be treated as non-existent.</p>"},{"location":"spec/impls/glue/","title":"Lance Glue Namespace","text":"<p>Lance Glue Namespace is an implementation using AWS Glue Data Catalog. For more details about AWS Glue, please read the AWS Glue Data Catalog Documentation.</p>"},{"location":"spec/impls/glue/#configuration","title":"Configuration","text":"<p>The Lance Glue namespace accepts the following configuration properties:</p> Property Required Description Default Example <code>catalog_id</code> No The Catalog ID of the Glue catalog (defaults to AWS account ID) <code>123456789012</code> <code>endpoint</code> No Custom Glue service endpoint for API compatible metastores <code>https://glue.example.com</code> <code>region</code> No AWS region for all Glue operations <code>us-west-2</code> <code>access_key_id</code> No AWS access key ID for static credentials <code>secret_access_key</code> No AWS secret access key for static credentials <code>session_token</code> No AWS session token for temporary credentials <code>root</code> No Storage root location of the lakehouse on Glue catalog Current working directory <code>/my/dir</code>, <code>s3://bucket/prefix</code> <code>storage.*</code> No Additional storage configurations to access table <code>storage.region=us-west-2</code>"},{"location":"spec/impls/glue/#authentication","title":"Authentication","text":"<p>The Glue namespace supports multiple authentication methods:</p> <ol> <li>Default AWS credential provider chain: When no explicit credentials are provided, the client uses the default AWS credential provider chain</li> <li>Static credentials: Set <code>access_key_id</code> and <code>secret_access_key</code> for basic AWS credentials</li> <li>Session credentials: Additionally provide <code>session_token</code> for temporary AWS credentials</li> </ol>"},{"location":"spec/impls/glue/#namespace-mapping","title":"Namespace Mapping","text":"<p>An AWS Glue Data Catalog can be viewed as the root Lance namespace. A database in Glue maps to the first level Lance namespace, to form a 2-level Lance namespace as a whole.</p>"},{"location":"spec/impls/glue/#table-definition","title":"Table Definition","text":"<p>When fully implemented, a Lance table should appear as a Table  object in AWS Glue with the following requirements:</p> <ol> <li>the <code>TableType</code> must be set to <code>EXTERNAL_TABLE</code> to indicate this is not a Glue managed table</li> <li>the <code>StorageDescriptor.Location</code> must point to the root location of the Lance table</li> <li>the <code>Parameters</code> must follow:<ol> <li>there is a key <code>table_type</code> set to <code>lance</code> (case insensitive)</li> <li>there is a key <code>managed_by</code> set to either <code>storage</code> or <code>impl</code> (case insensitive). If not set, default to <code>storage</code></li> <li>there is a key <code>version</code> set to the latest numeric version number of the table. This field will only be respected if <code>managed_by=impl</code></li> </ol> </li> </ol>"},{"location":"spec/impls/glue/#requirement-for-implementation-managed-table","title":"Requirement for Implementation Managed Table","text":"<p>Updates to implementation-managed Lance tables must use AWS Glue\u2019s <code>VersionId</code> for conditional updates through the UpdateTable API. If the <code>VersionId</code> does not  match the expected version, the update fails to prevent concurrent modification conflicts.</p>"},{"location":"spec/impls/hive/","title":"Lance Hive Namespace","text":"<p>Lance Hive Namespace is an implementation using Apache Hive MetaStore (HMS). For more details about HMS, please read HMS AdminManual 2.x  and HMS AdminManual 3.x.</p>"},{"location":"spec/impls/hive/#configuration","title":"Configuration","text":"<p>The Lance Hive namespace accepts the following configuration properties:</p> Property Required Description Default Example <code>client.pool-size</code> No Size of the HMS client connection pool 3 <code>5</code> <code>root</code> No Storage root location of the lakehouse on Hive catalog Current working directory <code>/my/dir</code>, <code>s3://bucket/prefix</code> <code>storage.*</code> No Additional storage configurations to access table <code>storage.region=us-west-2</code>"},{"location":"spec/impls/hive/#version-specific-configuration","title":"Version-specific Configuration","text":"<p>Hive 2.x: Uses the configuration properties listed above.</p> <p>Hive 3.x: Uses the same configuration properties as Hive 2.x, with an additional catalog name constant (<code>hive</code>) for catalog-level operations. </p>"},{"location":"spec/impls/hive/#namespace-mapping","title":"Namespace Mapping","text":"<p>A HMS server can be viewed as the root Lance namespace.</p> <p>For HMS 2.x and below, a database in HMS maps to the first level Lance namespace to form a 2-level Lance namespace as a whole.</p> <p>For HMS 3.x and above, a catalog in HMS maps to the first level Lance namespace, and a database in HMS maps to the second level Lance namespace to form a 3-level Lance namespace as a whole.</p>"},{"location":"spec/impls/hive/#table-definition","title":"Table Definition","text":"<p>A Lance table should appear as a Table object  in HMS with the following requirements:</p> <ol> <li>the <code>tableType</code> must be set as <code>EXTERNAL_TABLE</code> to indicate this is not a managed Hive table</li> <li>the <code>location</code> in <code>storageDescriptor</code> must point to the root location of the Lance table</li> <li>the <code>parameters</code> must follow:<ol> <li>there is a key <code>table_type</code> set to <code>lance</code> (case insensitive)</li> <li>there is a key <code>managed_by</code> set to either <code>storage</code> or <code>impl</code> (case insensitive). If not set, default to <code>storage</code></li> <li>there is a key <code>version</code> set to the latest numeric version number of the table. This field will only be respected if <code>managed_by=impl</code> </li> </ol> </li> </ol>"},{"location":"spec/impls/hive/#requirement-for-implementation-managed-table","title":"Requirement for Implementation Managed Table","text":"<p>An update to the implementation managed table must use Hive's atomic update feature (HIVE-26882) and use the <code>version</code> parameter value to perform conditional update through alter_table_with_environment_context</p>"},{"location":"spec/impls/rest/","title":"Lance REST Namespace","text":"<p>In an enterprise environment, typically there is a requirement to store tables in a metadata service for more advanced governance features around access control, auditing, lineage tracking, etc. Lance REST Namespace is an OpenAPI protocol that enables reading, writing and managing Lance tables by connecting those metadata services or building a custom metadata server in a standardized way. The REST server definition can be found in the OpenAPI specification.</p>"},{"location":"spec/impls/rest/#configuration","title":"Configuration","text":"<p>The Lance REST namespace accepts the following configuration properties:</p> Property Required Description Default Example <code>uri</code> Yes The URI endpoint for the REST API <code>https://api.example.com/lance</code> <code>delimiter</code> No The delimiter used to parse object string identifiers in REST routes <code>.</code> <code>.</code>, <code>/</code>, <code>::</code>, <code>#</code> <code>headers.*</code> No Additional headers to send with every request <code>headers.Authorization=Bearer...</code>"},{"location":"spec/impls/rest/#headers","title":"Headers","text":"<p>Properties with the <code>headers.</code> prefix are passed as HTTP headers with every request to the REST server after removing the prefix. For example, <code>headers.Authorization</code> becomes the <code>Authorization</code> header.</p> <p>Common header configurations include: - <code>headers.Authorization</code>: Authentication tokens (Bearer, Basic, etc.) - <code>headers.X-API-Key</code>: API key authentication - <code>headers.X-Request-ID</code>: Request tracking</p>"},{"location":"spec/impls/rest/#rest-routes","title":"REST Routes","text":"<p>The REST route for an operation typically follows the pattern of <code>POST /&lt;version&gt;/&lt;object&gt;/{id}/&lt;action&gt;</code>, for example <code>POST /v1/namespace/{id}/list</code> for <code>ListNamespace</code>. The request and response schemas are used as the actual request and response of the route. </p> <p>The key design principle of the REST route is that all the necessary information for a reverse proxy  (e.g. load balancing, authN, authZ) should be available for access without the need to deserialize request body.</p> <p>For routes that involve multiple objects, all related objects should be present in the route. For example, the route for <code>RenameTable</code> is thus <code>POST /v1/table/{from_id}/rename/to/{to_id}</code>.</p>"},{"location":"spec/impls/rest/#standard-operations","title":"Standard Operations","text":"<p>Standard operations should take the same request and return the same response as any other implementation.</p> <p>The information in the route could also present in the request body. When the information in the route and request body both present but do not match, the server must throw a 400 Bad Request error. When the information in the request body is missing, the server must use the information in the route instead.</p>"},{"location":"spec/impls/rest/#non-standard-operations","title":"Non-Standard Operations","text":"<p>For request and response that cannot be simply described as a JSON object  the REST server needs to perform special handling to describe equivalent information through path parameters,  query parameters and headers. The specific handling is described in the OpenAPI spec. Here are the non-standard operations:</p> <ul> <li>ListNamespaces</li> <li>ListTables</li> <li>ListTableTags</li> <li>CreateTable</li> <li>InsertIntoTable</li> <li>MergeInsertIntoTable</li> </ul>"},{"location":"spec/impls/rest/#namespace-server-and-adapter","title":"Namespace Server and Adapter","text":"<p>Any REST HTTP server that implements this OpenAPI protocol is called a Lance Namespace server. If you are a metadata service provider that is building a custom implementation of Lance namespace, building a REST server gives you standardized integration to Lance without the need to worry about tool support and continuously distribute newer library versions compared to using an implementation.</p> <p>If the main purpose of this server is to be a proxy on top of an existing metadata service, converting back and forth between Lance REST API models and native API models of the metadata service, then this Lance namespace server is called a Lance Namespace adapter.</p>"},{"location":"spec/impls/rest/#choosing-between-an-adapter-vs-an-implementation","title":"Choosing between an Adapter vs an Implementation","text":"<p>Any adapter can always be directly a Lance namespace implementation bypassing the REST server, and vise versa. In fact, an implementation is basically the backend of an adapter. For example, we natively support a Lance HMS Namespace implementation, as well as a Lance namespace adapter for HMS by using the HMS Namespace implementation to fulfill requests in the Lance REST server.</p> <p>If you are considering between a Lance namespace adapter vs implementation to build or use in your environment, here are some criteria to consider:</p> <ol> <li>Multi-Language Feasibility &amp; Maintenance Cost: If you want a single strategy that works across all Lance language bindings, an adapter is preferred.    Sometimes it is not even possible for an integration to go with the implementation approach since it cannot support all the languages.    Sometimes an integration is popular or important enough that it is viable to build an implementation and maintain one library per language.</li> <li>Tooling Support: each tool needs to declare the Lance namespace implementations it supports.    That means there will be a preference for tools to always support a REST namespace,    but it might not always support a specific implementation. This favors the adapter approach.</li> <li>Security: if you have security concerns about the adapter being a man-in-the-middle, you should choose an implementation</li> <li>Performance: after all, adapter adds one layer of indirection and is thus not the most performant solution.    If you are performance sensitive, you should choose an implementation</li> </ol>"},{"location":"spec/impls/rest/create-table/","title":"REST Implementation Non-Standard Operation - CreateTable","text":""},{"location":"spec/impls/rest/create-table/#rest-route-definition","title":"REST Route Definition","text":"<pre><code>  /v1/table/{id}/create:\n    parameters:\n      - $ref: '#/components/parameters/id'\n      - $ref: '#/components/parameters/delimiter'\n      - name: \"x-lance-table-location\"\n        in: header\n        required: false\n        schema:\n          type: string\n        description: URI pointing to root location to create the table at\n      - name: \"x-lance-table-properties\"\n        in: header\n        required: false\n        schema:\n          type: string\n        description: |\n          JSON-encoded string map (e.g. { \"owner\": \"jack\" })\n    post:\n      tags:\n        - Table\n        - Data\n      summary: Create a table with the given name\n      operationId: CreateTable\n      description: |\n        Create table `id` in the namespace with the given data in Arrow IPC stream.\n\n        The schema of the Arrow IPC stream is used as the table schema.    \n        If the stream is empty, the API creates a new empty table.\n\n        REST NAMESPACE ONLY\n        REST namespace uses Arrow IPC stream as the request body.\n        It passes in the `CreateTableRequest` information in the following way:\n        - `id`: pass through path parameter of the same name\n        - `location`: pass through header `x-lance-table-location`\n        - `properties`: pass through header `x-lance-table-properties`\n      requestBody:\n        description: Arrow IPC data\n        content:\n          application/vnd.apache.arrow.stream:\n            schema:\n              type: string\n              format: binary\n        required: true\n      responses:\n        200:\n          $ref: '#/components/responses/CreateTableResponse'\n        400:\n          $ref: '#/components/responses/BadRequestErrorResponse'\n        401:\n          $ref: '#/components/responses/UnauthorizedErrorResponse'\n        403:\n          $ref: '#/components/responses/ForbiddenErrorResponse'\n        404:\n          $ref: '#/components/responses/NotFoundErrorResponse'\n        503:\n          $ref: '#/components/responses/ServiceUnavailableErrorResponse'\n        5XX:\n          $ref: '#/components/responses/ServerErrorResponse'\n</code></pre>"},{"location":"spec/impls/rest/insert-into-table/","title":"REST Implementation Non-Standard Operation - InsertIntoTable","text":""},{"location":"spec/impls/rest/insert-into-table/#rest-route-definition","title":"REST Route Definition","text":"<pre><code>  /v1/table/{id}/insert:\n    parameters:\n      - $ref: '#/components/parameters/id'\n      - $ref: '#/components/parameters/delimiter'\n      - name: mode\n        in: query\n        description: |\n          How the insert should behave:\n          - append (default): insert data to the existing table\n          - overwrite: remove all data in the table and then insert data to it\n        required: false\n        schema:\n          type: string\n          enum:\n            - append\n            - overwrite\n          default: append\n    post:\n      tags:\n        - Table\n        - Data\n      summary: Insert records into a table\n      operationId: InsertIntoTable\n      description: |\n        Insert new records into table `id`.\n\n        REST NAMESPACE ONLY\n        REST namespace uses Arrow IPC stream as the request body.\n        It passes in the `InsertIntoTableRequest` information in the following way:\n        - `id`: pass through path parameter of the same name\n        - `mode`: pass through query parameter of the same name\n      requestBody:\n        description: Arrow IPC stream containing the records to insert\n        content:\n          application/vnd.apache.arrow.stream:\n            schema:\n              type: string\n              format: binary\n        required: true\n      responses:\n        200:\n          $ref: '#/components/responses/InsertIntoTableResponse'\n        400:\n          $ref: '#/components/responses/BadRequestErrorResponse'\n        401:\n          $ref: '#/components/responses/UnauthorizedErrorResponse'\n        403:\n          $ref: '#/components/responses/ForbiddenErrorResponse'\n        404:\n          $ref: '#/components/responses/NotFoundErrorResponse'\n        503:\n          $ref: '#/components/responses/ServiceUnavailableErrorResponse'\n        5XX:\n          $ref: '#/components/responses/ServerErrorResponse'\n</code></pre>"},{"location":"spec/impls/rest/list-namespaces/","title":"REST Implementation Non-Standard Operation - ListNamespaces","text":""},{"location":"spec/impls/rest/list-namespaces/#rest-route-definition","title":"REST Route Definition","text":"<pre><code>  /v1/namespace/{id}/list:\n    parameters:\n      - $ref: '#/components/parameters/id'\n      - $ref: '#/components/parameters/delimiter'\n      - name: 'page_token'\n        in: query\n        schema:\n          $ref: '#/components/schemas/PageToken'\n      - name: 'limit'\n        in: query\n        schema:\n          $ref: '#/components/schemas/PageLimit'\n    get:\n      tags:\n        - Namespace\n        - Metadata\n      summary: List namespaces\n      operationId: ListNamespaces\n      description: |\n        List all child namespace names of the parent namespace `id`.\n\n        REST NAMESPACE ONLY\n        REST namespace uses GET to perform this operation without a request body.\n        It passes in the `ListNamespacesRequest` information in the following way:\n        - `id`: pass through path parameter of the same name\n        - `page_token`: pass through query parameter of the same name\n        - `limit`: pass through query parameter of the same name\n      responses:\n        200:\n          $ref: '#/components/responses/ListNamespacesResponse'\n        400:\n          $ref: '#/components/responses/BadRequestErrorResponse'\n        401:\n          $ref: '#/components/responses/UnauthorizedErrorResponse'\n        403:\n          $ref: '#/components/responses/ForbiddenErrorResponse'\n        404:\n          $ref: '#/components/responses/NotFoundErrorResponse'\n        406:\n          $ref: '#/components/responses/UnsupportedOperationErrorResponse'\n        503:\n          $ref: '#/components/responses/ServiceUnavailableErrorResponse'\n        5XX:\n          $ref: '#/components/responses/ServerErrorResponse'\n</code></pre>"},{"location":"spec/impls/rest/list-table-tags/","title":"REST Implementation Non-Standard Operation - ListTableTags","text":""},{"location":"spec/impls/rest/list-table-tags/#rest-route-definition","title":"REST Route Definition","text":"<pre><code>  /v1/table/{id}/tags/list:\n    parameters:\n      - $ref: '#/components/parameters/id'\n      - $ref: '#/components/parameters/delimiter'\n      - name: 'page_token'\n        in: query\n        schema:\n          $ref: '#/components/schemas/PageToken'\n      - name: 'limit'\n        in: query\n        schema:\n          $ref: '#/components/schemas/PageLimit'\n    get:\n      tags:\n        - Table\n        - Tag\n        - Metadata\n      summary: List all tags for a table\n      operationId: ListTableTags\n      description: |\n        List all tags that have been created for table `id`.\n        Returns a map of tag names to their corresponding version numbers and metadata.\n\n        REST NAMESPACE ONLY\n        REST namespace uses GET to perform this operation without a request body.\n        It passes in the `ListTableTagsRequest` information in the following way:\n        - `id`: pass through path parameter of the same name\n        - `page_token`: pass through query parameter of the same name\n        - `limit`: pass through query parameter of the same name\n      responses:\n        200:\n          $ref: '#/components/responses/ListTableTagsResponse'\n        400:\n          $ref: '#/components/responses/BadRequestErrorResponse'\n        401:\n          $ref: '#/components/responses/UnauthorizedErrorResponse'\n        403:\n          $ref: '#/components/responses/ForbiddenErrorResponse'\n        404:\n          $ref: '#/components/responses/NotFoundErrorResponse'\n        503:\n          $ref: '#/components/responses/ServiceUnavailableErrorResponse'\n        5XX:\n          $ref: '#/components/responses/ServerErrorResponse'\n</code></pre>"},{"location":"spec/impls/rest/list-tables/","title":"REST Implementation Non-Standard Operation - ListTables","text":""},{"location":"spec/impls/rest/list-tables/#rest-route-definition","title":"REST Route Definition","text":"<pre><code>  /v1/namespace/{id}/table/list:\n    parameters:\n      - $ref: '#/components/parameters/id'\n      - $ref: '#/components/parameters/delimiter'\n      - name: 'page_token'\n        in: query\n        schema:\n          $ref: '#/components/schemas/PageToken'\n      - name: 'limit'\n        in: query\n        schema:\n          $ref: '#/components/schemas/PageLimit'\n    get:\n      tags:\n        - Namespace\n        - Table\n        - Metadata\n      summary: List tables in a namespace\n      operationId: ListTables\n      description: |\n        List all child table names of the parent namespace `id`.\n\n        REST NAMESPACE ONLY\n        REST namespace uses GET to perform this operation without a request body.\n        It passes in the `ListTablesRequest` information in the following way:\n        - `id`: pass through path parameter of the same name\n        - `page_token`: pass through query parameter of the same name\n        - `limit`: pass through query parameter of the same name\n      responses:\n        200:\n          $ref: '#/components/responses/ListTablesResponse'\n        400:\n          $ref: '#/components/responses/BadRequestErrorResponse'\n        401:\n          $ref: '#/components/responses/UnauthorizedErrorResponse'\n        403:\n          $ref: '#/components/responses/ForbiddenErrorResponse'\n        404:\n          $ref: '#/components/responses/NotFoundErrorResponse'\n        406:\n          $ref: '#/components/responses/UnsupportedOperationErrorResponse'\n        503:\n          $ref: '#/components/responses/ServiceUnavailableErrorResponse'\n        5XX:\n          $ref: '#/components/responses/ServerErrorResponse'\n</code></pre>"},{"location":"spec/impls/rest/merge-insert-into-table/","title":"REST Implementation Non-Standard Operation - MergeInsertIntoTable","text":""},{"location":"spec/impls/rest/merge-insert-into-table/#rest-route-definition","title":"REST Route Definition","text":"<pre><code>  /v1/table/{id}/merge_insert:\n    parameters:\n      - $ref: '#/components/parameters/id'\n      - $ref: '#/components/parameters/delimiter'\n      - name: \"on\"\n        in: query\n        description: Column name to use for matching rows (required)\n        required: true\n        schema:\n          type: string\n      - name: \"when_matched_update_all\"\n        in: query\n        description: Update all columns when rows match\n        required: false\n        schema:\n          type: boolean\n          default: false\n      - name: \"when_matched_update_all_filt\"\n        in: query\n        description: The row is updated (similar to UpdateAll) only for rows where the SQL expression evaluates to true\n        required: false\n        schema:\n          type: string\n      - name: \"when_not_matched_insert_all\"\n        in: query\n        description: Insert all columns when rows don't match\n        required: false\n        schema:\n          type: boolean\n          default: false\n      - name: \"when_not_matched_by_source_delete\"\n        in: query\n        description: Delete all rows from target table that don't match a row in the source table\n        required: false\n        schema:\n          type: boolean\n          default: false\n      - name: \"when_not_matched_by_source_delete_filt\"\n        in: query\n        description: Delete rows from the target table if there is no match AND the SQL expression evaluates to true\n        schema:\n          type: string\n    post:\n      tags:\n        - Table\n        - Data\n      summary: Merge insert (upsert) records into a table\n      operationId: MergeInsertIntoTable\n      description: |\n        Performs a merge insert (upsert) operation on table `id`.\n        This operation updates existing rows\n        based on a matching column and inserts new rows that don't match.\n        It returns the number of rows inserted and updated.\n\n        REST NAMESPACE ONLY\n        REST namespace uses Arrow IPC stream as the request body.\n        It passes in the `MergeInsertIntoTableRequest` information in the following way:\n        - `id`: pass through path parameter of the same name\n        - `on`: pass through query parameter of the same name\n        - `when_matched_update_all`: pass through query parameter of the same name\n        - `when_matched_update_all_filt`: pass through query parameter of the same name\n        - `when_not_matched_insert_all`: pass through query parameter of the same name\n        - `when_not_matched_by_source_delete`: pass through query parameter of the same name\n        - `when_not_matched_by_source_delete_filt`: pass through query parameter of the same name\n      requestBody:\n        description: Arrow IPC stream containing the records to merge\n        content:\n          application/vnd.apache.arrow.stream:\n            schema:\n              type: string\n              format: binary\n        required: true\n      responses:\n        200:\n          $ref: '#/components/responses/MergeInsertIntoTableResponse'\n        400:\n          $ref: '#/components/responses/BadRequestErrorResponse'\n        401:\n          $ref: '#/components/responses/UnauthorizedErrorResponse'\n        403:\n          $ref: '#/components/responses/ForbiddenErrorResponse'\n        404:\n          $ref: '#/components/responses/NotFoundErrorResponse'\n        503:\n          $ref: '#/components/responses/ServiceUnavailableErrorResponse'\n        5XX:\n          $ref: '#/components/responses/ServerErrorResponse'\n</code></pre>"},{"location":"spec/operations/","title":"Namespace Operations","text":"<p>The Lance Namespace Specification defines a list of operations that can be performed against any Lance namespace:</p> Operation ID Current Version Namespace Table Index Metadata Data Transaction CreateNamespace 1 \u2713 \u2713 ListNamespaces 1 \u2713 \u2713 DescribeNamespace 1 \u2713 \u2713 DropNamespace 1 \u2713 \u2713 NamespaceExists 1 \u2713 \u2713 ListTables 1 \u2713 \u2713 \u2713 RegisterTable 1 \u2713 \u2713 DescribeTable 1 \u2713 \u2713 TableExists 1 \u2713 \u2713 DropTable 1 \u2713 \u2713 DeregisterTable 1 \u2713 \u2713 InsertIntoTable 1 \u2713 \u2713 MergeInsertIntoTable 1 \u2713 \u2713 UpdateTable 1 \u2713 \u2713 DeleteFromTable 1 \u2713 \u2713 QueryTable 1 \u2713 \u2713 CountTableRows 1 \u2713 \u2713 CreateTable 1 \u2713 \u2713 CreateTableIndex 1 \u2713 \u2713 \u2713 ListTableIndices 1 \u2713 \u2713 \u2713 DescribeTableIndexStats 1 \u2713 \u2713 \u2713 RestoreTable 1 \u2713 \u2713 ListTableVersions 1 \u2713 \u2713 ExplainTableQueryPlan 1 \u2713 \u2713 AnalyzeTableQueryPlan 1 \u2713 \u2713 AlterTableAddColumns 1 \u2713 \u2713 AlterTableAlterColumns 1 \u2713 \u2713 AlterTableDropColumns 1 \u2713 \u2713 GetTableStats 1 \u2713 \u2713 ListTableTags 1 \u2713 \u2713 GetTableTagVersion 1 \u2713 \u2713 CreateTableTag 1 \u2713 \u2713 DeleteTableTag 1 \u2713 \u2713 UpdateTableTag 1 \u2713 \u2713 DropTableIndex 1 \u2713 \u2713 \u2713 DescribeTransaction 1 \u2713 \u2713 AlterTransaction 1 \u2713 \u2713"},{"location":"spec/operations/#operation-versioning","title":"Operation Versioning","text":"<p>When backwards incompatible change is introduced, a new operation version needs to be created, with a naming convention of <code>&lt;operationId&gt;V&lt;version&gt;</code>, for example <code>ListNamespacesV2</code>, <code>DescribeTableV3</code>, etc.</p>"},{"location":"spec/operations/#operation-request-and-response-schema","title":"Operation Request and Response Schema","text":"<p>In general, each operation has a request and response. The request and response schema is defined using JSON schema in the  <code>components/schemas</code> section of the OpenAPI specification.</p> <p>Note</p> <p>For exceptions to this rule, see the Notes section of the operations</p>"},{"location":"spec/operations/#error-response-model","title":"Error Response Model","text":"<p>All error responses follow the JSON error response model based on RFC-7807:</p> <pre><code>    ErrorResponse:\n      type: object\n      description: Common JSON error response model\n      properties:\n        error:\n          type: string\n          description: a brief, human-readable message about the error\n          example: Incorrect username or password\n        code:\n          type: integer\n          minimum: 400\n          maximum: 600\n          description: |\n            HTTP style response code, where 4XX represents client side errors \n            and 5XX represents server side errors.\n\n            For implementations that uses HTTP (e.g. REST namespace),\n            this field can be optional in favor of the HTTP response status code.\n            In case both values exist and do not match, the HTTP response status code should be used.\n          example: 404\n        type:\n          type: string\n          description: |\n            An optional type identifier string for the error.\n            This allows the implementation to specify their internal error type,\n            which could be more detailed than the HTTP standard status code.\n          example: /errors/incorrect-user-pass\n        detail:\n          type: string\n          description: |\n            an optional human-readable explanation of the error.\n            This can be used to record information such as stack trace.\n          example: Authentication failed due to incorrect username or password\n        instance:\n          type: string\n          description: |\n            a string that identifies the specific occurrence of the error.\n            This can be a URI, a request or response ID, \n            or anything that the implementation can recognize to trace specific occurrence of the error.\n          example: /login/log/abc123\n</code></pre>"},{"location":"spec/operations/#http-status-codes-and-responses","title":"HTTP Status Codes and Responses","text":""},{"location":"spec/operations/#400-bad-request-error-response","title":"400 - Bad Request Error Response","text":"<pre><code>    BadRequestErrorResponse:\n      description:\n        Indicates a bad request error. It could be caused by an unexpected request\n        body format or other forms of request validation failure, such as invalid json.\n        Usually serves application/json content, although in some cases simple text/plain content might\n        be returned by the server's middleware.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n          example: {\n            \"type\": \"/errors/bad-request\",\n            \"title\": \"Malformed request\",\n            \"status\": 400,\n            \"detail\": \"\",\n            \"instance\": \"/v1/namespaces\"\n          }\n</code></pre>"},{"location":"spec/operations/#401-unauthorized-error-response","title":"401 - Unauthorized Error Response","text":"<pre><code>    UnauthorizedErrorResponse:\n      description: Unauthorized. The request lacks valid authentication credentials for the operation.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n          example: {\n            \"type\": \"/errors/unauthorized-request\",\n            \"title\": \"No valid authentication credentials for the operation\",\n            \"status\": 401,\n            \"detail\": \"\",\n            \"instance\": \"/v1/namespaces\"\n          }\n</code></pre>"},{"location":"spec/operations/#403-forbidden-error-response","title":"403 - Forbidden Error Response","text":"<pre><code>    ForbiddenErrorResponse:\n      description: Forbidden. Authenticated user does not have the necessary permissions.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n          example: {\n            \"type\": \"/errors/forbidden-request\",\n            \"title\": \"Not authorized to make this request\",\n            \"status\": 403,\n            \"detail\": \"\",\n            \"instance\": \"/v1/namespaces\"\n          }\n</code></pre>"},{"location":"spec/operations/#404-not-found-error-response","title":"404 - Not Found Error Response","text":"<pre><code>    NotFoundErrorResponse:\n      description:\n        A server-side problem that means can not find the specified resource.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n          example: {\n            \"type\": \"/errors/not-found-error\",\n            \"title\": \"Not found Error\",\n            \"status\": 404,\n            \"detail\": \"\",\n            \"instance\": \"/v1/namespaces/{ns}\"\n          }\n</code></pre>"},{"location":"spec/operations/#406-unsupported-operation-error-response","title":"406 - Unsupported Operation Error Response","text":"<pre><code>    UnsupportedOperationErrorResponse:\n      description: Not Acceptable / Unsupported Operation. The server does not support this operation.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n          example: {\n            \"type\": \"/errors/unsupported-operation\",\n            \"title\": \"The server does not support this operation\",\n            \"status\": 406,\n            \"detail\": \"\",\n            \"instance\": \"/v1/namespaces\"\n          }\n</code></pre>"},{"location":"spec/operations/#409-conflict-error-response","title":"409 - Conflict Error Response","text":"<pre><code>    ConflictErrorResponse:\n      description: The request conflicts with the current state of the target resource.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n          example: {\n            \"type\": \"/errors/conflict\",\n            \"title\": \"The namespace has been concurrently modified\",\n            \"status\": 409,\n            \"detail\": \"\",\n            \"instance\": \"/v1/namespaces/{ns}\"\n          }\n</code></pre>"},{"location":"spec/operations/#503-service-unavailable-error-response","title":"503 - Service Unavailable Error Response","text":"<pre><code>    ServiceUnavailableErrorResponse:\n      description:\n        The service is not ready to handle the request. The client should wait and retry.\n        The service may additionally send a Retry-After header to indicate when to retry.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n          example: {\n            \"type\": \"/errors/service-unavailable\",\n            \"title\": \"Slow down\",\n            \"status\": 503,\n            \"detail\": \"\",\n            \"instance\": \"/v1/namespaces\"\n          }\n</code></pre>"},{"location":"spec/operations/#5xx-server-error-response","title":"5XX - Server Error Response","text":"<pre><code>    ServerErrorResponse:\n      description:\n        A server-side problem that might not be addressable from the client\n        side. Used for server 5xx errors without more specific documentation in\n        individual routes.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n          example: {\n            \"type\": \"/errors/server-error\",\n            \"title\": \"Internal Server Error\",\n            \"status\": 500,\n            \"detail\": \"\",\n            \"instance\": \"/v1/namespaces\"\n          }\n</code></pre>"},{"location":"spec/operations/alter-table-add-columns/","title":"AlterTableAddColumns","text":""},{"location":"spec/operations/alter-table-add-columns/#description","title":"Description","text":"<pre><code>      description: |\n        Add new columns to table `id` using SQL expressions or default values.\n</code></pre>"},{"location":"spec/operations/alter-table-add-columns/#request-schema","title":"Request Schema","text":"<pre><code>    AlterTableAddColumnsRequest:\n      type: object\n      required:\n        - new_columns\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n        new_columns:\n          type: array\n          items:\n            $ref: '#/components/schemas/NewColumnTransform'\n          description: List of new columns to add\n</code></pre>"},{"location":"spec/operations/alter-table-add-columns/#response-schema","title":"Response Schema","text":"<pre><code>    AlterTableAddColumnsResponse:\n      type: object\n      required:\n        - version\n      properties:\n        version:\n          type: integer\n          format: int64\n          minimum: 0\n          description: Version of the table after adding columns\n</code></pre>"},{"location":"spec/operations/alter-table-add-columns/#related-components-schema","title":"Related Components Schema","text":""},{"location":"spec/operations/alter-table-add-columns/#new-column-transform","title":"New Column Transform","text":"<pre><code>    NewColumnTransform:\n      type: object\n      required:\n        - name\n        - expression\n      properties:\n        name:\n          type: string\n          description: Name of the new column\n        expression:\n          type: string\n          description: SQL expression to compute the column value\n</code></pre>"},{"location":"spec/operations/alter-table-alter-columns/","title":"AlterTableAlterColumns","text":""},{"location":"spec/operations/alter-table-alter-columns/#description","title":"Description","text":"<pre><code>      description: |\n        Modify existing columns in table `id`, such as renaming or changing data types.\n</code></pre>"},{"location":"spec/operations/alter-table-alter-columns/#request-schema","title":"Request Schema","text":"<pre><code>    AlterTableAlterColumnsRequest:\n      type: object\n      required:\n        - alterations\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n        alterations:\n          type: array\n          items:\n            $ref: '#/components/schemas/ColumnAlteration'\n          description: List of column alterations to perform\n</code></pre>"},{"location":"spec/operations/alter-table-alter-columns/#response-schema","title":"Response Schema","text":"<pre><code>    AlterTableAlterColumnsResponse:\n      type: object\n      required:\n        - version\n      properties:\n        version:\n          type: integer\n          format: int64\n          minimum: 0\n          description: Version of the table after altering columns\n</code></pre>"},{"location":"spec/operations/alter-table-alter-columns/#related-components-schema","title":"Related Components Schema","text":""},{"location":"spec/operations/alter-table-alter-columns/#column-alteration","title":"Column Alteration","text":"<pre><code>    ColumnAlteration:\n      type: object\n      required:\n        - column\n      properties:\n        column:\n          type: string\n          description: Name of the column to alter\n        rename:\n          type: string\n          description: New name for the column (optional)\n        cast_to:\n          type: string\n          description: New data type to cast the column to (optional)\n</code></pre>"},{"location":"spec/operations/alter-table-drop-columns/","title":"AlterTableDropColumns","text":""},{"location":"spec/operations/alter-table-drop-columns/#description","title":"Description","text":"<pre><code>      description: |\n        Remove specified columns from table `id`.\n</code></pre>"},{"location":"spec/operations/alter-table-drop-columns/#request-schema","title":"Request Schema","text":"<pre><code>    AlterTableDropColumnsRequest:\n      type: object\n      required:\n        - columns\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n        columns:\n          type: array\n          items:\n            type: string\n          description: Names of columns to drop\n</code></pre>"},{"location":"spec/operations/alter-table-drop-columns/#response-schema","title":"Response Schema","text":"<pre><code>    AlterTableDropColumnsResponse:\n      type: object\n      required:\n        - version\n      properties:\n        version:\n          type: integer\n          format: int64\n          minimum: 0\n          description: Version of the table after dropping columns\n</code></pre>"},{"location":"spec/operations/alter-transaction/","title":"AlterTransaction","text":""},{"location":"spec/operations/alter-transaction/#description","title":"Description","text":"<pre><code>      description: |\n        Alter a transaction with a list of actions such as setting status or properties.\n        The server should either succeed and apply all actions, or fail and apply no action.\n</code></pre>"},{"location":"spec/operations/alter-transaction/#request-schema","title":"Request Schema","text":"<p><pre><code>    AlterTransactionRequest:\n      type: object\n      description: |\n        Alter a transaction with a list of actions.\n        The server should either succeed and apply all actions, or fail and apply no action.\n      required:\n        - actions\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n        actions:\n          type: array\n          minItems: 1\n          items:\n            $ref: '#/components/schemas/AlterTransactionAction'\n</code></pre> Supporting action schemas:</p> <p>Set Status Action: <pre><code>          default: false\n        when_not_matched_by_source_delete_filt:\n          description: Delete rows from the target table if there is no match AND the SQL expression evaluates to true\n          type: string\n\n    MergeInsertIntoTableResponse:\n</code></pre> Set Property Action: <pre><code>      type: object\n      description: Response from merge insert operation\n      properties:\n        num_updated_rows:\n          type: integer\n          format: int64\n          description: Number of rows updated\n          minimum: 0\n        num_inserted_rows:\n          type: integer\n</code></pre> Unset Property Action: <pre><code>          minimum: 0\n\n    UpdateTableRequest:\n      type: object\n      description: |\n        Each update consists of a column name and an SQL expression that will be\n        evaluated against the current row's value. Optionally, a predicate can be\n        provided to filter which rows to update.\n</code></pre></p>"},{"location":"spec/operations/alter-transaction/#response-schema","title":"Response Schema","text":"<pre><code>    AlterTransactionResponse:\n      type: object\n      required:\n        - status\n      properties:\n        status:\n          $ref: '#/components/schemas/TransactionStatus'\n        properties:\n          type: object\n          additionalProperties:\n            type: string\n</code></pre>"},{"location":"spec/operations/alter-transaction/#related-components-schema","title":"Related Components Schema","text":""},{"location":"spec/operations/alter-transaction/#set-status-action","title":"Set Status Action","text":"<pre><code>    AlterTransactionSetStatus:\n      type: object\n      properties:\n        status:\n          $ref: '#/components/schemas/TransactionStatus'\n</code></pre>"},{"location":"spec/operations/alter-transaction/#set-property-action","title":"Set Property Action","text":"<pre><code>    AlterTransactionSetProperty:\n      type: object\n      properties:\n        key:\n          type: string\n        value:\n          type: string\n        mode:\n          $ref: '#/components/schemas/SetPropertyMode'\n</code></pre>"},{"location":"spec/operations/alter-transaction/#unset-property-action","title":"Unset Property Action","text":"<pre><code>    AlterTransactionUnsetProperty:\n      type: object\n      properties:\n        key:\n          type: string\n        mode:\n          $ref: '#/components/schemas/UnsetPropertyMode'\n</code></pre>"},{"location":"spec/operations/analyze-table-query-plan/","title":"AnalyzeTableQueryPlan","text":""},{"location":"spec/operations/analyze-table-query-plan/#description","title":"Description","text":"<pre><code>      description: |\n        Analyze the query execution plan for a query against table `id`.\n        Returns detailed statistics and analysis of the query execution plan.\n</code></pre>"},{"location":"spec/operations/analyze-table-query-plan/#request-schema","title":"Request Schema","text":"<pre><code>    AnalyzeTableQueryPlanRequest:\n      type: object\n      required:\n        - query\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n        query:\n          $ref: '#/components/schemas/QueryTableRequest'\n</code></pre>"},{"location":"spec/operations/analyze-table-query-plan/#response-schema","title":"Response Schema","text":"<pre><code>    AnalyzeTableQueryPlanResponse:\n      type: object\n      required:\n        - analysis\n      properties:\n        analysis:\n          type: string\n          description: Detailed analysis of the query execution plan\n</code></pre>"},{"location":"spec/operations/count-table-rows/","title":"CountTableRows","text":""},{"location":"spec/operations/count-table-rows/#description","title":"Description","text":"<pre><code>      description: |\n        Count the number of rows in table `id`\n</code></pre>"},{"location":"spec/operations/count-table-rows/#request-schema","title":"Request Schema","text":"<pre><code>    CountTableRowsRequest:\n      type: object\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n        version:\n          description: |\n            Version of the table to describe.\n            If not specified, server should resolve it to the latest version.\n          type: integer\n          format: int64\n          minimum: 0\n        filter:\n          description: |\n            SQL filter expression to be applied\n          type: string\n</code></pre>"},{"location":"spec/operations/count-table-rows/#response-schema","title":"Response Schema","text":"<pre><code>    CountTableRowsResponse:\n      type: integer\n      format: int64\n      description: |\n        Response containing the count of rows. \n        Serializes transparently as just the number for backward compatibility.\n      minimum: 0\n</code></pre>"},{"location":"spec/operations/create-namespace/","title":"CreateNamespace","text":""},{"location":"spec/operations/create-namespace/#description","title":"Description","text":"<pre><code>      description: |\n        Create new namespace `id`.\n\n        During the creation process, the implementation may modify user-provided `properties`, \n        such as adding additional properties like `created_at` to user-provided properties, \n        omitting any specific property, or performing actions based on any property value.\n</code></pre>"},{"location":"spec/operations/create-namespace/#request-schema","title":"Request Schema","text":"<pre><code>    CreateNamespaceRequest:\n      type: object\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n        mode:\n          type: string\n          description: |\n            There are three modes when trying to create a namespace,\n            to differentiate the behavior when a namespace of the same name already exists:\n              * CREATE: the operation fails with 409.\n              * EXIST_OK: the operation succeeds and the existing namespace is kept.\n              * OVERWRITE: the existing namespace is dropped and a new empty namespace with this name is created.\n          enum:\n            - CREATE\n            - EXIST_OK\n            - OVERWRITE\n        properties:\n          type: object\n          additionalProperties:\n            type: string\n</code></pre>"},{"location":"spec/operations/create-namespace/#response-schema","title":"Response Schema","text":"<pre><code>    CreateNamespaceResponse:\n      type: object\n      properties:\n        properties:\n          description: |\n            Properties after the namespace is created.\n\n            If the server does not support namespace properties, it should return null for this field.\n            If namespace properties are supported, but none are set, it should return an empty object.\n          type: object\n          additionalProperties:\n            type: string\n</code></pre>"},{"location":"spec/operations/create-table-index/","title":"CreateTableIndex","text":""},{"location":"spec/operations/create-table-index/#description","title":"Description","text":"<pre><code>      description: |\n        Create an index on a table column for faster search operations.\n        Supports vector indexes (IVF_FLAT, IVF_HNSW_SQ, IVF_PQ, etc.) and scalar indexes (BTREE, BITMAP, FTS, etc.).\n        Index creation is handled asynchronously. \n        Use the `ListTableIndices` and `DescribeTableIndexStats` operations to monitor index creation progress.\n</code></pre>"},{"location":"spec/operations/create-table-index/#request-schema","title":"Request Schema","text":"<pre><code>    CreateTableIndexRequest:\n      type: object\n      required:\n        - column\n        - index_type\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n        column:\n          type: string\n          description: Name of the column to create index on\n        index_type:\n          type: string\n          enum: \n            - BTREE\n            - BITMAP\n            - LABEL_LIST\n            - IVF_FLAT\n            - IVF_PQ\n            - IVF_HNSW_SQ\n            - FTS\n          description: Type of index to create\n        metric_type:\n          type: string\n          enum: \n            - l2\n            - cosine\n            - dot\n          nullable: true\n          description: Distance metric type for vector indexes\n        with_position:\n          type: boolean\n          nullable: true\n          description: Optional FTS parameter for position tracking\n        base_tokenizer:\n          type: string\n          nullable: true\n          description: Optional FTS parameter for base tokenizer\n        language:\n          type: string\n          nullable: true\n          description: Optional FTS parameter for language\n        max_token_length:\n          type: integer\n          nullable: true\n          minimum: 0\n          description: Optional FTS parameter for maximum token length\n        lower_case:\n          type: boolean\n          nullable: true\n          description: Optional FTS parameter for lowercase conversion\n        stem:\n          type: boolean\n          nullable: true\n          description: Optional FTS parameter for stemming\n        remove_stop_words:\n          type: boolean\n          nullable: true\n          description: Optional FTS parameter for stop word removal\n        ascii_folding:\n          type: boolean\n          nullable: true\n          description: Optional FTS parameter for ASCII folding\n</code></pre>"},{"location":"spec/operations/create-table-index/#response-schema","title":"Response Schema","text":"<pre><code>    CreateTableIndexResponse:\n      type: object\n      required:\n        - location\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n        location:\n          type: string\n          description: Table location (usually empty)\n        properties:\n          type: object\n          additionalProperties:\n            type: string\n          description: Additional properties (usually empty)\n</code></pre>"},{"location":"spec/operations/create-table-tag/","title":"CreateTableTag","text":""},{"location":"spec/operations/create-table-tag/#description","title":"Description","text":"<pre><code>      description: |\n        Create a new tag for table `id` that points to a specific version.\n</code></pre>"},{"location":"spec/operations/create-table-tag/#request-schema","title":"Request Schema","text":"<pre><code>    CreateTableTagRequest:\n      type: object\n      required:\n        - tag\n        - version\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n        tag:\n          type: string\n          description: Name of the tag to create\n        version:\n          type: integer\n          format: int64\n          minimum: 0\n          description: Version number for the tag to point to\n</code></pre>"},{"location":"spec/operations/create-table/","title":"CreateTable","text":""},{"location":"spec/operations/create-table/#description","title":"Description","text":"<pre><code>      description: |\n        Create table `id` in the namespace with the given data in Arrow IPC stream.\n\n        The schema of the Arrow IPC stream is used as the table schema.    \n        If the stream is empty, the API creates a new empty table.\n</code></pre>"},{"location":"spec/operations/create-table/#request-schema","title":"Request Schema","text":"<pre><code>    CreateTableRequest:\n      type: object\n      description: |\n        Request for creating a table, excluding the Arrow IPC stream.\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n        location:\n          type: string\n        schema:\n          $ref: '#/components/schemas/JsonArrowSchema'\n        properties:\n          type: object\n          additionalProperties:\n            type: string\n</code></pre>"},{"location":"spec/operations/create-table/#response-schema","title":"Response Schema","text":"<pre><code>    CreateTableResponse:\n      type: object\n      properties:\n        location:\n          type: string\n        version:\n          type: integer\n          format: int64\n          minimum: 0\n        schema:\n          $ref: '#/components/schemas/JsonArrowSchema'\n        properties:\n          type: object\n          additionalProperties:\n            type: string\n        storage_options:\n          type: object\n          description: |\n            Configuration options to be used to access storage. The available\n            options depend on the type of storage in use. These will be\n            passed directly to Lance to initialize storage access.\n          additionalProperties:\n            type: string\n</code></pre>"},{"location":"spec/operations/delete-from-table/","title":"DeleteFromTable","text":""},{"location":"spec/operations/delete-from-table/#description","title":"Description","text":"<pre><code>      description: |\n        Delete rows from table `id`.\n</code></pre>"},{"location":"spec/operations/delete-from-table/#request-schema","title":"Request Schema","text":"<pre><code>    DeleteFromTableRequest:\n      type: object\n      description: |\n        Delete data from table based on a SQL predicate.\n        Returns the number of rows that were deleted.\n      required:\n        - predicate\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n          description: The namespace identifier\n        predicate:\n          type: string\n          description: SQL predicate to filter rows for deletion\n</code></pre>"},{"location":"spec/operations/delete-from-table/#response-schema","title":"Response Schema","text":"<pre><code>    DeleteFromTableResponse:\n      type: object\n      required:\n        - version\n      properties:\n        version:\n          type: integer\n          format: int64\n          description: The commit version associated with the operation\n          minimum: 0\n</code></pre>"},{"location":"spec/operations/delete-table-tag/","title":"DeleteTableTag","text":""},{"location":"spec/operations/delete-table-tag/#description","title":"Description","text":"<pre><code>      description: |\n        Delete an existing tag from table `id`.\n</code></pre>"},{"location":"spec/operations/delete-table-tag/#request-schema","title":"Request Schema","text":"<pre><code>    DeleteTableTagRequest:\n      type: object\n      required:\n        - tag\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n        tag:\n          type: string\n          description: Name of the tag to delete\n</code></pre>"},{"location":"spec/operations/deregister-table/","title":"DeregisterTable","text":""},{"location":"spec/operations/deregister-table/#description","title":"Description","text":"<pre><code>      description: |\n        Deregister table `id` from its namespace.\n</code></pre>"},{"location":"spec/operations/deregister-table/#request-schema","title":"Request Schema","text":"<pre><code>    DeregisterTableRequest:\n      type: object\n      description: |\n         The table content remains available in the storage.\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n</code></pre>"},{"location":"spec/operations/deregister-table/#response-schema","title":"Response Schema","text":"<pre><code>    DeregisterTableResponse:\n      type: object\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n        location:\n          type: string\n        properties:\n          type: object\n          additionalProperties:\n            type: string\n</code></pre>"},{"location":"spec/operations/describe-namespace/","title":"DescribeNamespace","text":""},{"location":"spec/operations/describe-namespace/#description","title":"Description","text":"<pre><code>      description: |\n        Describe the detailed information for namespace `id`.\n</code></pre>"},{"location":"spec/operations/describe-namespace/#request-schema","title":"Request Schema","text":"<pre><code>    DescribeNamespaceRequest:\n      type: object\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n</code></pre>"},{"location":"spec/operations/describe-namespace/#response-schema","title":"Response Schema","text":"<pre><code>    DescribeNamespaceResponse:\n      type: object\n      properties:\n        properties:\n          type: object\n          description:\n            Properties stored on the namespace, if supported by the server.\n            If the server does not support namespace properties, it should return null for this field.\n            If namespace properties are supported, but none are set, it should return an empty object.\n          additionalProperties:\n            type: string\n          example: { \"owner\": \"Ralph\", 'created_at': '1452120468' }\n          default: { }\n          nullable: true\n</code></pre>"},{"location":"spec/operations/describe-table-index-stats/","title":"DescribeTableIndexStats","text":""},{"location":"spec/operations/describe-table-index-stats/#description","title":"Description","text":"<pre><code>      description: |\n        Get statistics for a specific index on a table. Returns information about\n        the index type, distance type (for vector indices), and row counts.\n</code></pre>"},{"location":"spec/operations/describe-table-index-stats/#request-schema","title":"Request Schema","text":"<pre><code>    DescribeTableIndexStatsRequest:\n      type: object\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n        version:\n          type: integer\n          format: int64\n          minimum: 0\n          nullable: true\n          description: Optional table version to get stats for\n        index_name:\n          type: string\n          description: Name of the index\n</code></pre>"},{"location":"spec/operations/describe-table-index-stats/#response-schema","title":"Response Schema","text":"<pre><code>    DescribeTableIndexStatsResponse:\n      type: object\n      properties:\n        distance_type:\n          type: string\n          nullable: true\n          description: Distance type for vector indexes\n        index_type:\n          type: string\n          nullable: true\n          description: Type of the index\n        num_indexed_rows:\n          type: integer\n          format: int64\n          minimum: 0\n          nullable: true\n          description: Number of indexed rows\n        num_unindexed_rows:\n          type: integer\n          format: int64\n          minimum: 0\n          nullable: true\n          description: Number of unindexed rows\n</code></pre>"},{"location":"spec/operations/describe-table/","title":"DescribeTable","text":""},{"location":"spec/operations/describe-table/#description","title":"Description","text":"<pre><code>      description: |\n        Describe the detailed information for table `id`.\n</code></pre>"},{"location":"spec/operations/describe-table/#request-schema","title":"Request Schema","text":"<pre><code>    DescribeTableRequest:\n      type: object\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n        version:\n          description: |\n            Version of the table to describe.\n            If not specified, server should resolve it to the latest version.\n          type: integer\n          format: int64\n          minimum: 0\n</code></pre>"},{"location":"spec/operations/describe-table/#response-schema","title":"Response Schema","text":"<pre><code>    DescribeTableResponse:\n      type: object\n      properties:\n        version:\n          type: integer\n          format: int64\n          minimum: 0\n        location:\n          type: string\n        schema:\n          $ref: '#/components/schemas/JsonArrowSchema'\n        properties:\n          type: object\n          additionalProperties:\n            type: string\n        storage_options:\n          type: object\n          description: |\n            Configuration options to be used to access storage. The available\n            options depend on the type of storage in use. These will be\n            passed directly to Lance to initialize storage access.\n          additionalProperties:\n            type: string\n</code></pre>"},{"location":"spec/operations/describe-table/#related-components-schema","title":"Related Components Schema","text":""},{"location":"spec/operations/describe-table/#json-arrow-schema","title":"Json Arrow Schema","text":"<pre><code>    JsonArrowSchema:\n      type: object\n      description: |\n        JSON representation of a Apache Arrow schema.\n      required:\n      - fields\n      properties:\n        fields:\n          type: array\n          items:\n            $ref: '#/components/schemas/JsonArrowField'\n        metadata:\n          type: object\n          additionalProperties:\n            type: string\n          propertyNames:\n            type: string\n</code></pre>"},{"location":"spec/operations/describe-table/#json-arrow-schema_1","title":"Json Arrow Schema","text":"<pre><code>    JsonArrowField:\n      type: object\n      description: |\n        JSON representation of an Apache Arrow field.\n      required:\n      - name\n      - type\n      - nullable\n      properties:\n        metadata:\n          type: object\n          additionalProperties:\n            type: string\n          propertyNames:\n            type: string\n        name:\n          type: string\n        nullable:\n          type: boolean\n        type:\n          $ref: '#/components/schemas/JsonArrowDataType'\n</code></pre>"},{"location":"spec/operations/describe-transaction/","title":"DescribeTransaction","text":""},{"location":"spec/operations/describe-transaction/#description","title":"Description","text":"<pre><code>      description: |\n        Return a detailed information for a given transaction\n</code></pre>"},{"location":"spec/operations/describe-transaction/#request-schema","title":"Request Schema","text":"<pre><code>    DescribeTransactionRequest:\n      type: object\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n</code></pre>"},{"location":"spec/operations/describe-transaction/#response-schema","title":"Response Schema","text":"<pre><code>    DescribeTransactionResponse:\n      type: object\n      required:\n        - status\n      properties:\n        status:\n          $ref: '#/components/schemas/TransactionStatus'\n        properties:\n          type: object\n          additionalProperties:\n            type: string\n</code></pre>"},{"location":"spec/operations/drop-namespace/","title":"DropNamespace","text":""},{"location":"spec/operations/drop-namespace/#description","title":"Description","text":"<pre><code>      description: |\n        Drop namespace `id` from its parent namespace.\n</code></pre>"},{"location":"spec/operations/drop-namespace/#request-schema","title":"Request Schema","text":"<pre><code>    DropNamespaceRequest:\n      type: object\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n        mode:\n          type: string\n          description: |\n            The mode for dropping a namespace, deciding the server behavior when the namespace to drop is not found.\n            - FAIL (default): the server must return 400 indicating the namespace to drop does not exist.\n            - SKIP: the server must return 204 indicating the drop operation has succeeded.\n          enum:\n            - SKIP\n            - FAIL\n        behavior:\n          type: string\n          description: |\n            The behavior for dropping a namespace.\n            - RESTRICT (default): the namespace should not contain any table or child namespace when drop is initiated.\n                If tables are found, the server should return error and not drop the namespace.\n            - CASCADE: all tables and child namespaces in the namespace are dropped before the namespace is dropped.\n          enum:\n            - RESTRICT\n            - CASCADE\n</code></pre>"},{"location":"spec/operations/drop-namespace/#response-schema","title":"Response Schema","text":"<pre><code>    DropNamespaceResponse:\n      type: object\n      properties:\n        properties:\n          type: object\n          additionalProperties:\n            type: string\n        transactionId:\n          description: |\n            If present, indicating the operation is long running and should be tracked using GetTransaction\n          type: array\n          items:\n            type: string\n</code></pre>"},{"location":"spec/operations/drop-table-index/","title":"DropTableIndex","text":""},{"location":"spec/operations/drop-table-index/#description","title":"Description","text":"<pre><code>      description: |\n        Drop the specified index from table `id`.\n</code></pre>"},{"location":"spec/operations/drop-table-index/#request-schema","title":"Request Schema","text":"<pre><code>    DropTableIndexRequest:\n      type: object\n      required:\n        - id\n        - index_name\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n        index_name:\n          type: string\n          description: Name of the index to drop\n</code></pre>"},{"location":"spec/operations/drop-table-index/#response-schema","title":"Response Schema","text":"<pre><code>    DropTableIndexResponse:\n      type: object\n      properties:\n        version:\n          type: integer\n          format: int64\n          minimum: 0\n          description: Version of the table after dropping the index\n</code></pre>"},{"location":"spec/operations/drop-table/","title":"DropTable","text":""},{"location":"spec/operations/drop-table/#description","title":"Description","text":"<pre><code>      description: |\n        Drop table `id` and delete its data.\n</code></pre>"},{"location":"spec/operations/drop-table/#request-schema","title":"Request Schema","text":"<pre><code>    DropTableRequest:\n      type: object\n      description: |\n        If the table and its data can be immediately deleted, return information of the deleted table.\n        Otherwise, return a transaction ID that client can use to track deletion progress.\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n</code></pre>"},{"location":"spec/operations/drop-table/#response-schema","title":"Response Schema","text":"<pre><code>    DropTableResponse:\n      type: object\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n        location:\n          type: string\n        properties:\n          type: object\n          additionalProperties:\n            type: string\n        transactionId:\n          type: array\n          description: |\n            If present, indicating the operation is long running and should be tracked using GetTransaction\n          items:\n            type: string\n</code></pre>"},{"location":"spec/operations/explain-table-query-plan/","title":"ExplainTableQueryPlan","text":""},{"location":"spec/operations/explain-table-query-plan/#description","title":"Description","text":"<pre><code>      description: |\n        Get the query execution plan for a query against table `id`.\n        Returns a human-readable explanation of how the query will be executed.\n</code></pre>"},{"location":"spec/operations/explain-table-query-plan/#request-schema","title":"Request Schema","text":"<pre><code>    ExplainTableQueryPlanRequest:\n      type: object\n      required:\n        - query\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n        query:\n          $ref: '#/components/schemas/QueryTableRequest'\n        verbose:\n          type: boolean\n          default: false\n          description: Whether to return verbose explanation\n</code></pre>"},{"location":"spec/operations/explain-table-query-plan/#response-schema","title":"Response Schema","text":"<pre><code>    ExplainTableQueryPlanResponse:\n      type: object\n      required:\n        - plan\n      properties:\n        plan:\n          type: string\n          description: Human-readable query execution plan\n</code></pre>"},{"location":"spec/operations/get-table-stats/","title":"GetTableStats","text":""},{"location":"spec/operations/get-table-stats/#description","title":"Description","text":"<pre><code>      description: |\n        Get statistics for table `id`, including row counts, data sizes, and column statistics.\n</code></pre>"},{"location":"spec/operations/get-table-stats/#request-schema","title":"Request Schema","text":"<pre><code>    GetTableStatsRequest:\n      type: object\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n</code></pre>"},{"location":"spec/operations/get-table-stats/#response-schema","title":"Response Schema","text":"<pre><code>    GetTableStatsResponse:\n      type: object\n      required:\n        - num_rows\n        - size_bytes\n      properties:\n        num_rows:\n          type: integer\n          format: int64\n          minimum: 0\n          description: Total number of rows in the table\n        size_bytes:\n          type: integer\n          format: int64\n          minimum: 0\n          description: Total size of the table in bytes\n        num_fragments:\n          type: integer\n          format: int64\n          minimum: 0\n          description: Number of data fragments\n</code></pre>"},{"location":"spec/operations/get-table-tag-version/","title":"GetTableTagVersion","text":""},{"location":"spec/operations/get-table-tag-version/#description","title":"Description","text":"<pre><code>      description: |\n        Get the version number that a specific tag points to for table `id`.\n</code></pre>"},{"location":"spec/operations/get-table-tag-version/#request-schema","title":"Request Schema","text":"<pre><code>    GetTableTagVersionRequest:\n      type: object\n      required:\n        - tag\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n        tag:\n          type: string\n          description: Name of the tag to get version for\n</code></pre>"},{"location":"spec/operations/get-table-tag-version/#response-schema","title":"Response Schema","text":"<pre><code>    GetTableTagVersionResponse:\n      type: object\n      required:\n        - version\n      properties:\n        version:\n          type: integer\n          format: int64\n          minimum: 0\n          description: version number that the tag points to\n</code></pre>"},{"location":"spec/operations/insert-into-table/","title":"InsertIntoTable","text":""},{"location":"spec/operations/insert-into-table/#description","title":"Description","text":"<pre><code>      description: |\n        Insert new records into table `id`.\n</code></pre>"},{"location":"spec/operations/insert-into-table/#request-schema","title":"Request Schema","text":"<pre><code>    InsertIntoTableRequest:\n      type: object\n      description: |\n        Request for inserting records into a table, excluding the Arrow IPC stream.\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n        mode:\n          type: string\n          enum:\n            - append\n            - overwrite\n          default: append\n</code></pre>"},{"location":"spec/operations/insert-into-table/#response-schema","title":"Response Schema","text":"<pre><code>    InsertIntoTableResponse:\n      type: object\n      description: Response from inserting records into a table\n      properties:\n        version:\n          type: integer\n          format: int64\n          description: The version of the table after the insert\n          minimum: 0\n</code></pre>"},{"location":"spec/operations/list-namespaces/","title":"ListNamespaces","text":""},{"location":"spec/operations/list-namespaces/#description","title":"Description","text":"<pre><code>      description: |\n        List all child namespace names of the parent namespace `id`.\n</code></pre>"},{"location":"spec/operations/list-namespaces/#request-schema","title":"Request Schema","text":"<pre><code>    ListNamespacesRequest:\n      type: object\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n        page_token:\n          $ref: \"#/components/schemas/PageToken\"\n        limit:\n          $ref: \"#/components/schemas/PageLimit\"\n</code></pre>"},{"location":"spec/operations/list-namespaces/#response-schema","title":"Response Schema","text":"<pre><code>    ListNamespacesResponse:\n      type: object\n      required:\n        - namespaces\n      properties:\n        namespaces:\n          type: array\n          uniqueItems: true\n          description: |\n            The list of names of the child namespaces relative to the parent namespace `id` in the request.\n          items:\n            type: string\n        page_token:\n          $ref: \"#/components/schemas/PageToken\"\n</code></pre>"},{"location":"spec/operations/list-namespaces/#related-components-schema","title":"Related Components Schema","text":""},{"location":"spec/operations/list-namespaces/#page-token","title":"Page Token","text":"<pre><code>    PageToken:\n      description: |\n        An opaque token that allows pagination for list operations (e.g. ListNamespaces).\n\n        For an initial request of a list operation, \n        if the implementation cannot return all items in one response,\n        or if there are more items than the page limit specified in the request,\n        the implementation must return a page token in the response,\n        indicating there are more results available.\n\n        After the initial request, \n        the value of the page token from each response must be used\n        as the page token value for the next request.\n\n        Caller must interpret either `null`, \n        missing value or empty string value of the page token from\n        the implementation's response as the end of the listing results.\n      type: string\n      nullable: true\n</code></pre>"},{"location":"spec/operations/list-namespaces/#page-limit","title":"Page Limit","text":"<pre><code>    PageLimit:\n      description: |\n        An inclusive upper bound of the \n        number of results that a caller will receive.\n      type: integer\n      nullable: true\n</code></pre>"},{"location":"spec/operations/list-table-indices/","title":"ListTableIndices","text":""},{"location":"spec/operations/list-table-indices/#description","title":"Description","text":"<pre><code>      description: |\n        List all indices created on a table. Returns information about each index\n        including name, columns, status, and UUID.\n</code></pre>"},{"location":"spec/operations/list-table-indices/#request-schema","title":"Request Schema","text":"<pre><code>    ListTableIndicesRequest:\n      type: object\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n          description: The namespace identifier\n        version:\n          type: integer\n          format: int64\n          minimum: 0\n          nullable: true\n          description: Optional table version to list indexes from\n        page_token:\n          $ref: '#/components/schemas/PageToken'\n        limit:\n          $ref: '#/components/schemas/PageLimit'\n</code></pre>"},{"location":"spec/operations/list-table-indices/#response-schema","title":"Response Schema","text":"<pre><code>    ListTableIndicesResponse:\n      type: object\n      required:\n        - indexes\n      properties:\n        indexes:\n          type: array\n          items:\n            $ref: '#/components/schemas/IndexContent'\n          description: List of indexes on the table\n        page_token:\n          $ref: '#/components/schemas/PageToken'\n</code></pre>"},{"location":"spec/operations/list-table-tags/","title":"ListTableTags","text":""},{"location":"spec/operations/list-table-tags/#description","title":"Description","text":"<pre><code>      description: |\n        List all tags that have been created for table `id`.\n        Returns a map of tag names to their corresponding version numbers and metadata.\n</code></pre>"},{"location":"spec/operations/list-table-tags/#response-schema","title":"Response Schema","text":"<pre><code>    ListTableTagsResponse:\n      type: object\n      required:\n        - tags\n      properties:\n        tags:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/TagContents'\n          description: Map of tag names to their contents\n</code></pre>"},{"location":"spec/operations/list-table-versions/","title":"ListTableVersions","text":""},{"location":"spec/operations/list-table-versions/#description","title":"Description","text":"<pre><code>      description: |\n        List all versions (commits) of table `id` with their metadata.\n</code></pre>"},{"location":"spec/operations/list-table-versions/#request-schema","title":"Request Schema","text":"<pre><code>    ListTableVersionsRequest:\n      type: object\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n        page_token:\n          $ref: '#/components/schemas/PageToken'\n        limit:\n          $ref: '#/components/schemas/PageLimit'\n</code></pre>"},{"location":"spec/operations/list-table-versions/#response-schema","title":"Response Schema","text":"<pre><code>    ListTableVersionsResponse:\n      type: object\n      required:\n        - versions\n      properties:\n        versions:\n          type: array\n          items:\n            $ref: '#/components/schemas/TableVersion'\n          description: List of table versions\n        page_token:\n          $ref: '#/components/schemas/PageToken'\n</code></pre>"},{"location":"spec/operations/list-table-versions/#related-components-schema","title":"Related Components Schema","text":""},{"location":"spec/operations/list-table-versions/#table-version","title":"Table Version","text":"<pre><code>    TableVersion:\n      type: object\n      required:\n        - version\n        - timestamp\n      properties:\n        version:\n          type: integer\n          format: int64\n          minimum: 0\n          description: Version number\n        timestamp:\n          type: string\n          format: date-time\n          description: Timestamp when the version was created\n</code></pre>"},{"location":"spec/operations/list-tables/","title":"ListTables","text":""},{"location":"spec/operations/list-tables/#description","title":"Description","text":"<pre><code>      description: |\n        List all child table names of the parent namespace `id`.\n</code></pre>"},{"location":"spec/operations/list-tables/#request-schema","title":"Request Schema","text":"<pre><code>    ListTablesRequest:\n      type: object\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n        page_token:\n          $ref: \"#/components/schemas/PageToken\"\n        limit:\n          $ref: \"#/components/schemas/PageLimit\"\n</code></pre>"},{"location":"spec/operations/list-tables/#response-schema","title":"Response Schema","text":"<pre><code>    ListTablesResponse:\n      type: object\n      required:\n        - tables\n      properties:\n        tables:\n          type: array\n          uniqueItems: true\n          description: |\n            The list of names of the tables relative to the parent namespace `id` in the request.\n          items:\n            type: string\n        page_token:\n          $ref: \"#/components/schemas/PageToken\"\n</code></pre>"},{"location":"spec/operations/list-tables/#related-components-schema","title":"Related Components Schema","text":""},{"location":"spec/operations/list-tables/#page-token","title":"Page Token","text":"<pre><code>    PageToken:\n      description: |\n        An opaque token that allows pagination for list operations (e.g. ListNamespaces).\n\n        For an initial request of a list operation, \n        if the implementation cannot return all items in one response,\n        or if there are more items than the page limit specified in the request,\n        the implementation must return a page token in the response,\n        indicating there are more results available.\n\n        After the initial request, \n        the value of the page token from each response must be used\n        as the page token value for the next request.\n\n        Caller must interpret either `null`, \n        missing value or empty string value of the page token from\n        the implementation's response as the end of the listing results.\n      type: string\n      nullable: true\n</code></pre>"},{"location":"spec/operations/list-tables/#page-limit","title":"Page Limit","text":"<pre><code>    PageLimit:\n      description: |\n        An inclusive upper bound of the \n        number of results that a caller will receive.\n      type: integer\n      nullable: true\n</code></pre>"},{"location":"spec/operations/merge-insert-into-table/","title":"MergeInsertIntoTable","text":""},{"location":"spec/operations/merge-insert-into-table/#description","title":"Description","text":"<pre><code>      description: |\n        Performs a merge insert (upsert) operation on table `id`.\n        This operation updates existing rows\n        based on a matching column and inserts new rows that don't match.\n        It returns the number of rows inserted and updated.\n</code></pre>"},{"location":"spec/operations/merge-insert-into-table/#request-schema","title":"Request Schema","text":"<pre><code>    MergeInsertIntoTableRequest:\n      type: object\n      description: |\n        Request for merging or inserting records into a table, excluding the Arrow IPC stream.\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n        \"on\":\n          description: Column name to use for matching rows (required)\n          type: string\n        when_matched_update_all:\n          description: Update all columns when rows match\n          type: boolean\n          default: false\n        when_matched_update_all_filt:\n          description: The row is updated (similar to UpdateAll) only for rows where the SQL expression evaluates to true\n          type: string\n        when_not_matched_insert_all:\n          description: Insert all columns when rows don't match\n          type: boolean\n          default: false\n        when_not_matched_by_source_delete:\n          description: Delete all rows from target table that don't match a row in the source table\n          type: boolean\n          default: false\n        when_not_matched_by_source_delete_filt:\n          description: Delete rows from the target table if there is no match AND the SQL expression evaluates to true\n          type: string\n</code></pre>"},{"location":"spec/operations/merge-insert-into-table/#response-schema","title":"Response Schema","text":"<pre><code>    MergeInsertIntoTableResponse:\n      type: object\n      description: Response from merge insert operation\n      properties:\n        num_updated_rows:\n          type: integer\n          format: int64\n          description: Number of rows updated\n          minimum: 0\n        num_inserted_rows:\n          type: integer\n          format: int64\n          description: Number of rows inserted\n          minimum: 0\n        num_deleted_rows:\n          type: integer\n          format: int64\n          description: Number of rows deleted (typically 0 for merge insert)\n          minimum: 0\n        version:\n          type: integer\n          format: int64\n          description: The commit version associated with the operation\n          minimum: 0\n</code></pre>"},{"location":"spec/operations/namespace-exists/","title":"NamespaceExists","text":""},{"location":"spec/operations/namespace-exists/#description","title":"Description","text":"<pre><code>      description: |\n        Check if namespace `id` exists.\n\n        This operation must behave exactly like the DescribeNamespace API, \n        except it does not contain a response body.\n</code></pre>"},{"location":"spec/operations/namespace-exists/#request-schema","title":"Request Schema","text":"<pre><code>    NamespaceExistsRequest:\n      type: object\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n</code></pre>"},{"location":"spec/operations/namespace-exists/#response","title":"Response","text":"<p>This operation returns success if the namespace exists,  or an error if it does not exist. No response body is included in successful responses.</p>"},{"location":"spec/operations/query-table/","title":"QueryTable","text":""},{"location":"spec/operations/query-table/#description","title":"Description","text":"<pre><code>      description: |\n        Query table `id` with vector search, full text search and optional SQL filtering.\n        Returns results in Arrow IPC file or stream format.\n</code></pre>"},{"location":"spec/operations/query-table/#request-schema","title":"Request Schema","text":"<pre><code>    QueryTableRequest:\n      type: object\n      required:\n        - vector\n        - k\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n        bypass_vector_index:\n          type: boolean\n          description: Whether to bypass vector index\n        columns:\n          type: array\n          nullable: true\n          items:\n            type: string\n          description: Optional list of columns to return\n        distance_type:\n          type: string\n          description: Distance metric to use\n        ef:\n          type: integer\n          minimum: 0\n          description: Search effort parameter for HNSW index\n        fast_search:\n          type: boolean\n          description: Whether to use fast search\n        filter:\n          type: string\n          description: Optional SQL filter expression\n        full_text_query:\n          type: object\n          nullable: true\n          description: Optional full-text search query. Provide either string_query or structured_query, not both.\n          properties:\n            string_query:\n              $ref: '#/components/schemas/StringFtsQuery'\n            structured_query:\n              $ref: '#/components/schemas/StructuredFtsQuery'\n        k:\n          type: integer\n          minimum: 0\n          description: Number of results to return\n        lower_bound:\n          type: number\n          format: float\n          description: Lower bound for search\n        nprobes:\n          type: integer\n          minimum: 0\n          description: Number of probes for IVF index\n        offset:\n          type: integer\n          minimum: 0\n          description: Number of results to skip\n        prefilter:\n          type: boolean\n          description: Whether to apply filtering before vector search\n        refine_factor:\n          type: integer\n          format: int32\n          minimum: 0\n          description: Refine factor for search\n        upper_bound:\n          type: number\n          format: float\n          description: Upper bound for search\n        vector:\n          type: object\n          nullable: true\n          description: Query vector(s) for similarity search. Provide either single_vector or multi_vector, not both.\n          properties:\n            single_vector:\n              type: array\n              items:\n                type: number\n                format: float\n              description: Single query vector\n            multi_vector:\n              type: array\n              items:\n                type: array\n                items:\n                  type: number\n                  format: float\n              description: Multiple query vectors for batch search\n        vector_column:\n          type: string\n          description: Name of the vector column to search\n        version:\n          type: integer\n          format: int64\n          minimum: 0\n          description: Table version to query\n        with_row_id:\n          type: boolean\n          description: If true, return the row id as a column called `_rowid`\n</code></pre>"},{"location":"spec/operations/query-table/#response","title":"Response","text":"<p>The response returns query results in Arrow IPC file or stream format  containing the matching records based on the search criteria.</p>"},{"location":"spec/operations/register-table/","title":"RegisterTable","text":""},{"location":"spec/operations/register-table/#description","title":"Description","text":"<pre><code>      description: |\n        Register an existing table at a given storage location as `id`.\n</code></pre>"},{"location":"spec/operations/register-table/#request-schema","title":"Request Schema","text":"<pre><code>    RegisterTableRequest:\n      type: object\n      required:\n        - location\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n        location:\n          type: string\n        mode:\n          type: string\n          description: |\n            There are two modes when trying to register a table,\n            to differentiate the behavior when a table of the same name already exists:\n              * CREATE (default): the operation fails with 409.\n              * OVERWRITE: the existing table registration is replaced with the new registration.\n          enum:\n            - CREATE\n            - OVERWRITE\n        properties:\n          type: object\n          additionalProperties:\n            type: string\n</code></pre>"},{"location":"spec/operations/register-table/#response-schema","title":"Response Schema","text":"<pre><code>    RegisterTableResponse:\n      type: object\n      required:\n        - location\n      properties:\n        location:\n          type: string\n        properties:\n          type: object\n          additionalProperties:\n            type: string\n</code></pre>"},{"location":"spec/operations/restore-table/","title":"RestoreTable","text":""},{"location":"spec/operations/restore-table/#description","title":"Description","text":"<pre><code>      description: |\n        Restore table `id` to a specific version.\n</code></pre>"},{"location":"spec/operations/restore-table/#request-schema","title":"Request Schema","text":"<pre><code>    RestoreTableRequest:\n      type: object\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n        version:\n          type: integer\n          format: int64\n          minimum: 0\n          description: Version to restore to (if not specified, restores to current version)\n</code></pre>"},{"location":"spec/operations/restore-table/#response-schema","title":"Response Schema","text":"<pre><code>    RestoreTableResponse:\n      type: object\n      properties:\n        version:\n          type: integer\n          format: int64\n          minimum: 0\n          description: Version of the table after restore operation\n</code></pre>"},{"location":"spec/operations/table-exists/","title":"TableExists","text":""},{"location":"spec/operations/table-exists/#description","title":"Description","text":"<pre><code>      description: |\n        Check if table `id` exists.\n\n        This operation should behave exactly like DescribeTable, \n        except it does not contain a response body.\n</code></pre>"},{"location":"spec/operations/table-exists/#request-schema","title":"Request Schema","text":"<pre><code>    TableExistsRequest:\n      type: object\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n        version:\n          description: |\n            Version of the table to check existence.\n            If not specified, server should resolve it to the latest version.\n          type: integer\n          format: int64\n          minimum: 0\n</code></pre>"},{"location":"spec/operations/table-exists/#response","title":"Response","text":"<p>This operation returns success if the table exists, or an error if it does not exist.  No response body is included in successful responses.</p>"},{"location":"spec/operations/update-table-tag/","title":"UpdateTableTag","text":""},{"location":"spec/operations/update-table-tag/#description","title":"Description","text":"<pre><code>      description: |\n        Update an existing tag for table `id` to point to a different version.\n</code></pre>"},{"location":"spec/operations/update-table-tag/#request-schema","title":"Request Schema","text":"<pre><code>    UpdateTableTagRequest:\n      type: object\n      required:\n        - tag\n        - version\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n        tag:\n          type: string\n          description: Name of the tag to update\n        version:\n          type: integer\n          format: int64\n          minimum: 0\n          description: New version number for the tag to point to\n</code></pre>"},{"location":"spec/operations/update-table/","title":"UpdateTable","text":""},{"location":"spec/operations/update-table/#description","title":"Description","text":"<pre><code>      description: |\n        Update existing rows in table `id`.\n</code></pre>"},{"location":"spec/operations/update-table/#request-schema","title":"Request Schema","text":"<pre><code>    UpdateTableRequest:\n      type: object\n      description: |\n        Each update consists of a column name and an SQL expression that will be\n        evaluated against the current row's value. Optionally, a predicate can be\n        provided to filter which rows to update.\n      required:\n        - updates\n      properties:\n        id:\n          type: array\n          items:\n            type: string\n        predicate:\n          type: string\n          nullable: true\n          description: Optional SQL predicate to filter rows for update\n        updates:\n          type: array\n          items:\n            type: array\n            minItems: 2\n            maxItems: 2\n            items:\n              type: string\n          description: List of column updates as [column_name, expression] pairs\n</code></pre>"},{"location":"spec/operations/update-table/#response-schema","title":"Response Schema","text":"<pre><code>    UpdateTableResponse:\n      type: object\n      required:\n        - updated_rows\n        - version\n      properties:\n        updated_rows:\n          type: integer\n          format: int64\n          description: Number of rows updated\n          minimum: 0\n        version:\n          type: integer\n          format: int64\n          description: The commit version associated with the operation\n          minimum: 0\n</code></pre>"},{"location":"user-guide/java-sdk/","title":"Java SDK","text":"<p>This guide explains how to use the Java SDK to interact with a Lance namespace.</p>"},{"location":"user-guide/java-sdk/#installation","title":"Installation","text":"<p>Add the following dependency to your Maven project:</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.lancedb&lt;/groupId&gt;\n    &lt;artifactId&gt;lance-namespace-core&lt;/artifactId&gt;\n    &lt;version&gt;0.0.2&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>The artifact is available on Maven Central.</p>"},{"location":"user-guide/java-sdk/#configuration-and-initialization","title":"Configuration and Initialization","text":""},{"location":"user-guide/java-sdk/#lance-rest-catalog","title":"Lance REST Catalog","text":"<p>Use the following initialization approach:</p> <pre><code>import com.lancedb.lance.namespace.LanceRestNamespace;\n\nApiClient apiClient = new ApiClient();\napiClient.setBasePath(\"https://my-lance-namespace.com\");\nLanceRestNamespace namespace = new LanceRestNamespace(apiClient, config);\n</code></pre>"},{"location":"user-guide/java-sdk/#supported-endpoints","title":"Supported Endpoints","text":"<p>The Java SDK supports the following endpoints. Full API documentation is available at  javadoc.io.</p>"},{"location":"user-guide/java-sdk/#table-operations","title":"Table Operations","text":"<ul> <li>countTableRows - Count the number of rows in a table</li> <li>createTable - Create a new table with Arrow data</li> <li>describeTable - Get table metadata and schema</li> <li>dropTable - Delete a table</li> <li>insertIntoTable - Insert data into a table</li> <li>updateTable - Update rows in a table</li> <li>deleteFromTable - Delete rows from a table</li> <li>mergeInsertIntoTable - Upsert operation (update or insert)</li> <li>queryTable - Vector similarity search</li> </ul>"},{"location":"user-guide/java-sdk/#index-operations","title":"Index Operations","text":"<ul> <li>createTableIndex - Create a vector index</li> <li>createTableIndex - Create a vector or scalar index</li> <li>listTableIndices - List all indices on a table</li> <li>describeTableIndexStats - Get statistics for a specific index</li> </ul>"},{"location":"user-guide/java-sdk/#request-and-response-structure","title":"Request and Response Structure","text":"<p>Response Fields</p> <p>The response structures contain fields like <code>location</code>, <code>name</code>, <code>namespace</code>, and <code>properties</code> that are part of the lance-namespace protocol. These fields will be empty in responses and should be ignored.</p> <p>Request Fields</p> <p>The request structures contain field <code>name</code> which refers to the table name and is required. The <code>namespace</code> field is optional; if provided, the resulting table name will be in the format <code>namespace.name</code>.</p> <p>For detailed request/response structures, refer to the Apache Client documentation.</p>"},{"location":"user-guide/java-sdk/#examples","title":"Examples","text":""},{"location":"user-guide/java-sdk/#creating-a-table","title":"Creating a Table","text":"<p>Lance Namespace uses Apache Arrow format for data exchange. Here's a simple example creating a table with ID and embedding columns:</p> <pre><code>import org.apache.arrow.memory.BufferAllocator;\nimport org.apache.arrow.memory.RootAllocator;\nimport org.apache.arrow.vector.*;\nimport org.apache.arrow.vector.complex.FixedSizeListVector;\nimport org.apache.arrow.vector.types.pojo.*;\nimport org.apache.arrow.vector.types.FloatingPointPrecision;\nimport org.apache.arrow.vector.ipc.ArrowStreamWriter;\nimport java.io.ByteArrayOutputStream;\nimport java.nio.channels.Channels;\nimport java.util.Arrays;\n\n// Define schema: id and embedding columns\nField idField = new Field(\"id\", FieldType.nullable(new ArrowType.Int(32, true)), null);\nField embeddingField = new Field(\n    \"embedding\",\n    FieldType.nullable(new ArrowType.FixedSizeList(128)),  // 128-dimensional vectors\n    Arrays.asList(\n        new Field(\"item\", \n            FieldType.nullable(new ArrowType.FloatingPoint(FloatingPointPrecision.SINGLE)), \n            null)\n    )\n);\nSchema schema = new Schema(Arrays.asList(idField, embeddingField));\n\n// Create table with 1000 rows\ntry (BufferAllocator allocator = new RootAllocator();\n     VectorSchemaRoot root = VectorSchemaRoot.create(schema, allocator)) {\n\n    int numRows = 1000;\n    root.setRowCount(numRows);\n\n    // Get vectors\n    IntVector idVector = (IntVector) root.getVector(\"id\");\n    FixedSizeListVector embeddingVector = (FixedSizeListVector) root.getVector(\"embedding\");\n    Float4Vector dataVector = (Float4Vector) embeddingVector.getDataVector();\n\n    // Allocate memory\n    embeddingVector.allocateNew();\n\n    // Populate data\n    for (int i = 0; i &lt; numRows; i++) {\n        // Set ID\n        idVector.setSafe(i, i + 1);\n\n        // Set embedding vector\n        embeddingVector.setNotNull(i);\n        for (int dim = 0; dim &lt; 128; dim++) {\n            int index = i * 128 + dim;\n            // Example: random values (in practice, use your actual embeddings)\n            dataVector.setSafe(index, (float) Math.random());\n        }\n    }\n\n    // Set value counts\n    idVector.setValueCount(numRows);\n    dataVector.setValueCount(numRows * 128);\n    embeddingVector.setValueCount(numRows);\n\n    // Serialize to Arrow IPC format\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    try (ArrowStreamWriter writer = new ArrowStreamWriter(root, null, Channels.newChannel(out))) {\n        writer.start();\n        writer.writeBatch();\n        writer.end();\n    }\n\n    // Create table in LanceDB\n    byte[] arrowData = out.toByteArray();\n\n    CreateTableRequest createRequest = new CreateTableRequest();\n    createRequest.setName(\"my_vectors\");\n    CreateTableResponse response = namespace.createTable(createRequest, arrowData);\n    System.out.println(\"Created table with \" + numRows + \" rows\");\n}\n</code></pre> <p>For more complex schemas (e.g., with text fields for full-text search, categorical fields for filtering), you can add additional fields to the schema as needed.</p>"},{"location":"user-guide/java-sdk/#querying-a-table","title":"Querying a Table","text":"<p>Query results are returned in Arrow File format. Use <code>ArrowFileReader</code> to read the results.</p>"},{"location":"user-guide/java-sdk/#vector-search","title":"Vector Search","text":"<pre><code>import com.lancedb.lance.namespace.model.QueryTableRequest;\nimport com.lancedb.lance.namespace.model.QueryTableRequestVector;\nimport org.apache.arrow.vector.ipc.ArrowFileReader;\nimport org.apache.arrow.memory.ArrowBuf;\nimport org.apache.arrow.vector.ipc.message.ArrowBlock;\nimport java.nio.channels.SeekableByteChannel;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\n// Find similar items by vector\nQueryTableRequest queryRequest = new QueryTableRequest();\nqueryRequest.setName(\"my_vectors\");\nqueryRequest.setK(10);  // Get top 10 results\n\n// Create query vector (in practice, this would be your actual query embedding)\nList&lt;Float&gt; queryVector = new ArrayList&lt;&gt;();\nfor (int i = 0; i &lt; 128; i++) {\n    queryVector.add((float) Math.random());\n}\n\nQueryTableRequestVector vectorQuery = new QueryTableRequestVector();\nvectorQuery.setSingleVector(queryVector);\nqueryRequest.setVector(vectorQuery);\n\n// REQUIRED: Specify columns to return\nqueryRequest.setColumns(Arrays.asList(\"id\", \"embedding\"));\n\n// Optional: Set fast_search for better performance (only searches indexed data)\nqueryRequest.setFastSearch(true);\n\n// Execute query\nbyte[] queryResult = namespace.queryTable(queryRequest);\n\n// Parse results\ntry (BufferAllocator allocator = new RootAllocator();\n     ArrowFileReader reader = new ArrowFileReader(\n         new SeekableByteChannel() { /* See ArrowTestUtils for full implementation */ }, \n         allocator)) {\n\n    reader.loadRecordBatch(reader.getRecordBlocks().get(0));\n    VectorSchemaRoot root = reader.getVectorSchemaRoot();\n\n    IntVector idVector = (IntVector) root.getVector(\"id\");\n\n    System.out.println(\"Found \" + root.getRowCount() + \" similar vectors:\");\n    for (int i = 0; i &lt; Math.min(5, root.getRowCount()); i++) {\n        System.out.println(\"  ID: \" + idVector.get(i));\n    }\n}\n</code></pre>"},{"location":"user-guide/java-sdk/#fast-search-option","title":"Fast Search Option","text":"<p>Always use <code>fast_search=true</code> if possible. When enabled, the query will only search indexed data, providing better performance and avoiding potential data egress costs. When disabled, it will scan the entire unindexed portion of the column from storage, which can be slow and expensive.</p> <pre><code>QueryTableRequest queryRequest = new QueryTableRequest();\nqueryRequest.setName(\"my_table\");\n\nQueryTableRequestVector vectorQuery = new QueryTableRequestVector();\nvectorQuery.setSingleVector(queryVector);\nqueryRequest.setVector(vectorQuery);\nqueryRequest.setK(10);\n\nqueryRequest.setFastSearch(true); // Recommended for better performance\n</code></pre>"},{"location":"user-guide/java-sdk/#sql-filters","title":"SQL Filters","text":"<p>You can use SQL filters with or without vector search:</p> <pre><code>// Example 1: Filter-only query (no vector search)\nQueryTableRequest filterQuery = new QueryTableRequest();\nfilterQuery.setName(\"my_table\");\nfilterQuery.setK(20);  // Maximum results to return\nfilterQuery.setFilter(\"id &gt;= 100 AND id &lt; 200\");\nfilterQuery.setColumns(Arrays.asList(\"id\")); // Required!\n\nbyte[] filterResult = namespace.queryTable(filterQuery);\n\n// Example 2: Vector search with filter\nQueryTableRequest vectorWithFilter = new QueryTableRequest();\nvectorWithFilter.setName(\"my_vectors\");\nvectorWithFilter.setK(5);\n\n// Create query vector\nList&lt;Float&gt; queryVector = new ArrayList&lt;&gt;();\nfor (int i = 0; i &lt; 128; i++) {\n    queryVector.add((float) Math.random());\n}\nQueryTableRequestVector vectorQuery2 = new QueryTableRequestVector();\nvectorQuery2.setSingleVector(queryVector);\nvectorWithFilter.setVector(vectorQuery2);\n\n// Only search within specific ID range\nvectorWithFilter.setFilter(\"id &gt;= 500 AND id &lt; 600\");\nvectorWithFilter.setColumns(Arrays.asList(\"id\"));\n\nbyte[] filteredVectorResult = namespace.queryTable(vectorWithFilter);\n\n// Example 3: Complex filter expressions\nQueryTableRequest complexFilter = new QueryTableRequest();\ncomplexFilter.setName(\"my_table\");\ncomplexFilter.setK(100);\ncomplexFilter.setFilter(\"id &gt;= 10 AND id &lt;= 90\");\ncomplexFilter.setColumns(Arrays.asList(\"id\"));\n\n// Supported SQL operators:\n// - Comparison: =, !=, &lt;, &gt;, &lt;=, &gt;=\n// - Logical: AND, OR, NOT\n// - IN: category IN ('category1', 'category2')\n// - String: LIKE for pattern matching\n</code></pre>"},{"location":"user-guide/java-sdk/#prefilter-vs-postfilter","title":"Prefilter vs Postfilter","text":"<p>When combining vector search with filters, use <code>prefilter</code> to control the order of operations: - <code>prefilter=true</code>: Apply filter BEFORE vector search (faster when filter is selective) - <code>prefilter=false</code>: Apply filter AFTER vector search (better when filter matches many rows)</p> <pre><code>// Prefiltering - filter first, then search vectors\nQueryTableRequest prefilterQuery = new QueryTableRequest();\nprefilterQuery.setName(\"my_table\");\nQueryTableRequestVector vectorQuery3 = new QueryTableRequestVector();\nvectorQuery3.setSingleVector(queryVector);\nprefilterQuery.setVector(vectorQuery3);\nprefilterQuery.setK(10);\nprefilterQuery.setFilter(\"status = 'active'\");\nprefilterQuery.setPrefilter(true);\nprefilterQuery.setFastSearch(true);\n\n// Postfiltering - search vectors first, then filter (default)\nQueryTableRequest postfilterQuery = new QueryTableRequest();\npostfilterQuery.setName(\"my_table\");\nQueryTableRequestVector vectorQuery4 = new QueryTableRequestVector();\nvectorQuery4.setSingleVector(queryVector);\npostfilterQuery.setVector(vectorQuery4);\npostfilterQuery.setK(10);\npostfilterQuery.setFilter(\"category = 'electronics'\");\npostfilterQuery.setPrefilter(false);\npostfilterQuery.setFastSearch(true);\n</code></pre>"},{"location":"user-guide/java-sdk/#full-text-search","title":"Full-Text Search","text":"<p>Lance supports full-text search on string columns. First create an FTS index, then use text queries:</p> <pre><code>// Step 1: Create table with text content (add text columns to your schema)\n\n// Step 2: Create FTS index\nCreateTableIndexRequest ftsIndexRequest = new CreateTableIndexRequest();\nftsIndexRequest.setName(\"documents\");\nftsIndexRequest.setColumn(\"content\");\nftsIndexRequest.setIndexType(CreateTableIndexRequest.IndexTypeEnum.FTS);\n// Set withPosition=true if you plan to use PhraseQuery\nftsIndexRequest.setWithPosition(true);\n\nCreateTableIndexResponse ftsResponse = namespace.createTableIndex(ftsIndexRequest);\n// Wait for index to be built\nboolean indexReady = waitForIndexComplete(\"documents\", \"content_idx\", 30);\n\n// Step 3: Perform full-text search\nimport com.lancedb.lance.namespace.model.StringFtsQuery;\nimport com.lancedb.lance.namespace.model.QueryTableRequestFullTextQuery;\n\n// Example 1: Simple keyword search\nQueryTableRequest textQuery = new QueryTableRequest();\ntextQuery.setName(\"documents\");\ntextQuery.setK(5);\ntextQuery.setColumns(Arrays.asList(\"id\", \"title\", \"content\")); // Required!\n\nQueryTableRequestFullTextQuery fullTextQuery = new QueryTableRequestFullTextQuery();\nStringFtsQuery fts = new StringFtsQuery();\nfts.setQuery(\"machine learning\");  // Search for documents about machine learning\nfullTextQuery.setStringQuery(fts);\ntextQuery.setFullTextQuery(fullTextQuery);\n\nbyte[] results = namespace.queryTable(textQuery);\n// Expected: Documents containing \"machine\" and/or \"learning\"\n\n// Example 2: Search specific columns\nStringFtsQuery columnSearch = new StringFtsQuery();\ncolumnSearch.setQuery(\"neural networks\");\ncolumnSearch.setColumns(Arrays.asList(\"content\")); // Only search in content column\nfullTextQuery.setStringQuery(columnSearch);\n\n// Example 3: Full-text search with filter\nQueryTableRequest ftsWithFilter = new QueryTableRequest();\nftsWithFilter.setName(\"documents\");\nftsWithFilter.setK(10);\nftsWithFilter.setFilter(\"id &lt;= 3\");  // Only search in first 3 documents\nftsWithFilter.setColumns(Arrays.asList(\"id\", \"title\", \"content\"));\n\nStringFtsQuery filteredFts = new StringFtsQuery();\nfilteredFts.setQuery(\"learning\");\nQueryTableRequestFullTextQuery filteredFullText = new QueryTableRequestFullTextQuery();\nfilteredFullText.setStringQuery(filteredFts);\nftsWithFilter.setFullTextQuery(filteredFullText);\n\nbyte[] filteredResults = namespace.queryTable(ftsWithFilter);\n// Expected: Documents 1-3 that contain \"learning\"\n</code></pre>"},{"location":"user-guide/java-sdk/#advanced-structured-full-text-search","title":"Advanced: Structured Full-Text Search","text":"<p>The Java SDK supports complex structured full-text queries including boolean queries and phrase queries:</p> <pre><code>import com.lancedb.lance.namespace.model.*;\n\n// Example 1: Boolean Query - Complex search logic\nQueryTableRequest booleanSearchQuery = new QueryTableRequest();\nbooleanSearchQuery.setName(\"documents\");\nbooleanSearchQuery.setK(10);\nbooleanSearchQuery.setColumns(Arrays.asList(\"id\", \"title\", \"content\"));\n\n// Create structured query wrapper\nQueryTableRequestFullTextQuery fullTextQuery = new QueryTableRequestFullTextQuery();\nStructuredFtsQuery structured = new StructuredFtsQuery();\nFtsQuery ftsQuery = new FtsQuery();\n\n// Boolean query: MUST contain \"learning\" AND (SHOULD contain \"machine\" OR \"deep\")\n// Note: SHOULD clauses are optional when MUST clauses are present - they only affect ranking\nBooleanQuery boolQuery = new BooleanQuery();\n\n// MUST clause: documents must contain \"learning\"\nFtsQuery mustQuery = new FtsQuery();\nMatchQuery mustMatch = new MatchQuery();\nmustMatch.setTerms(\"learning\");\nmustMatch.setColumn(\"content\");\nmustQuery.setMatch(mustMatch);\nboolQuery.setMust(Arrays.asList(mustQuery));\n\n// SHOULD clauses: prefer documents with \"machine\" or \"deep\"\nFtsQuery shouldQuery1 = new FtsQuery();\nMatchQuery shouldMatch1 = new MatchQuery();\nshouldMatch1.setTerms(\"machine\");\nshouldMatch1.setColumn(\"content\");\nshouldQuery1.setMatch(shouldMatch1);\n\nFtsQuery shouldQuery2 = new FtsQuery();\nMatchQuery shouldMatch2 = new MatchQuery();\nshouldMatch2.setTerms(\"deep\");\nshouldMatch2.setColumn(\"content\");\nshouldQuery2.setMatch(shouldMatch2);\nboolQuery.setShould(Arrays.asList(shouldQuery1, shouldQuery2));\n\n// Optional: MUST NOT clause\nFtsQuery mustNotQuery = new FtsQuery();\nMatchQuery mustNotMatch = new MatchQuery();\nmustNotMatch.setTerms(\"beginner\");  // Exclude beginner content\nmustNotQuery.setMatch(mustNotMatch);\nboolQuery.setMustNot(Arrays.asList(mustNotQuery));\n\n// Set the boolean query\nftsQuery.setBoolean(boolQuery);\nstructured.setQuery(ftsQuery);\nfullTextQuery.setStructuredQuery(structured);\nbooleanSearchQuery.setFullTextQuery(fullTextQuery);\n\nbyte[] boolResults = namespace.queryTable(booleanSearchQuery);\n// Expected: Documents containing \"learning\" (required) and preferably \"machine\" or \"deep\"\n\n// Example 2: Phrase Query - Find exact phrases\n// IMPORTANT: PhraseQuery requires the FTS index to be created with withPosition=true\nQueryTableRequest phraseSearchQuery = new QueryTableRequest();\nphraseSearchQuery.setName(\"documents\");\nphraseSearchQuery.setK(5);\nphraseSearchQuery.setColumns(Arrays.asList(\"id\", \"title\", \"content\"));\n\n// Create phrase query\nQueryTableRequestFullTextQuery phraseFullText = new QueryTableRequestFullTextQuery();\nStructuredFtsQuery phraseStructured = new StructuredFtsQuery();\nFtsQuery phraseFtsQuery = new FtsQuery();\n\nPhraseQuery phrase = new PhraseQuery();\nphrase.setTerms(\"machine learning\");  // Find exact phrase\nphrase.setColumn(\"content\");\nphrase.setSlop(1);  // Allow 1 word between \"machine\" and \"learning\"\nphraseFtsQuery.setPhrase(phrase);\n\nphraseStructured.setQuery(phraseFtsQuery);\nphraseFullText.setStructuredQuery(phraseStructured);\nphraseSearchQuery.setFullTextQuery(phraseFullText);\n\nbyte[] phraseResults = namespace.queryTable(phraseSearchQuery);\n// Expected: Documents with \"machine learning\" or \"machine [word] learning\"\n// Note: Phrase queries search for terms in the specified order. \n// \"learning machine\" would NOT match this query.\n</code></pre> <p>PhraseQuery Requirements</p> <p>PhraseQuery requires the FTS index to be created with <code>withPosition=true</code>. If you attempt to use PhraseQuery on an index created without position information, you will receive an error: \"position is not found but required for phrase queries\". </p> <p>Always create your FTS index with position enabled if you plan to use phrase searches: <pre><code>CreateTableIndexRequest ftsIndexRequest = new CreateTableIndexRequest();\nftsIndexRequest.setName(\"documents\");\nftsIndexRequest.setColumn(\"content\");\nftsIndexRequest.setIndexType(CreateTableIndexRequest.IndexTypeEnum.FTS);\nftsIndexRequest.setWithPosition(true);  // Required for PhraseQuery\n</code></pre></p>"},{"location":"user-guide/java-sdk/#creating-a-vector-index","title":"Creating a Vector Index","text":"<p>Lance automatically optimizes index parameters based on best practices for your workload.</p> <p>Best Practices: - Index Type: Use <code>IVF_PQ</code> for production workloads (default) - Metric Type:    - Use <code>L2</code> for normalized vectors (faster computation)   - Use <code>COSINE</code> for non-normalized vectors (more compute-intensive) - Other parameters are automatically tuned by the system</p> <pre><code>import com.lancedb.lance.namespace.model.CreateTableIndexRequest;\n\n// Create vector index\nCreateTableIndexRequest indexRequest = new CreateTableIndexRequest();\nindexRequest.setName(\"my_table\");\nindexRequest.setColumn(\"embedding\");\nindexRequest.setIndexType(CreateTableIndexRequest.IndexTypeEnum.IVF_PQ);\nindexRequest.setMetricType(CreateTableIndexRequest.MetricTypeEnum.L2);\n\nCreateTableIndexResponse response = namespace.createTableIndex(indexRequest);\n</code></pre>"},{"location":"user-guide/java-sdk/#creating-a-scalar-index","title":"Creating a Scalar Index","text":"<p>Scalar indexes improve query performance when using filters.</p> <p>Index Type Selection: - BITMAP Index: Best for columns with low cardinality (&lt; few thousand unique values)   - Excellent search performance   - Relatively small index size - BTREE Index: Use when unique values are high</p> <p>Optimization Tip</p> <p>To enable BITMAP indexing on high-cardinality columns, reduce data precision: - Round floating-point values - Reduce timestamp precision (e.g., second \u2192 day)</p> <pre><code>import com.lancedb.lance.namespace.model.CreateTableIndexRequest;\n\n// Create scalar index\nCreateTableIndexRequest scalarIndexRequest = new CreateTableIndexRequest();\nscalarIndexRequest.setName(\"my_table\");\nscalarIndexRequest.setColumn(\"name\");\nscalarIndexRequest.setIndexType(CreateTableIndexRequest.IndexTypeEnum.BITMAP);\n\nCreateTableIndexResponse scalarResponse = namespace.createTableIndex(scalarIndexRequest);\n</code></pre> <p>Asynchronous Index Creation</p> <p>Similar to vector index creation, scalar index creation is also asynchronous. Use <code>listTableIndices</code> and <code>describeTableIndexStats</code> to monitor index creation progress.</p>"},{"location":"user-guide/java-sdk/#list-indices","title":"List Indices","text":"<p>List all indices on a table:</p> <pre><code>import com.lancedb.lance.namespace.model.ListTableIndicesRequest;\nimport com.lancedb.lance.namespace.model.ListTableIndicesResponse;\n\nListTableIndicesRequest listRequest = new ListTableIndicesRequest();\nlistRequest.setName(\"my_table\");\n\nListTableIndicesResponse listResponse = namespace.listTableIndices(listRequest);\nif (listResponse.getIndexes() != null) {\n    for (IndexListItemResponse index : listResponse.getIndexes()) {\n        System.out.println(\"Index: \" + index.getIndexName());\n        System.out.println(\"  Columns: \" + index.getColumns());\n        System.out.println(\"  Index Type: \" + index.getIndexType());\n    }\n}\n</code></pre>"},{"location":"user-guide/java-sdk/#get-index-statistics","title":"Get Index Statistics","text":"<p>Get detailed statistics for a specific index: <pre><code>import com.lancedb.lance.namespace.model.DescribeTableIndexStatsRequest;\nimport com.lancedb.lance.namespace.model.DescribeTableIndexStatsResponse;\n\nDescribeTableIndexStatsRequest statsRequest = new DescribeTableIndexStatsRequest();\nstatsRequest.setName(\"my_table\");\n\n// Get stats for specific index (index name format: &lt;column_name&gt;_idx)\nDescribeTableIndexStatsResponse stats = namespace.describeTableIndexStats(statsRequest, \"embedding_idx\");\n\nSystem.out.println(\"Index Type: \" + stats.getIndexType());\nSystem.out.println(\"Distance Type: \" + stats.getDistanceType());\nSystem.out.println(\"Indexed Rows: \" + stats.getNumIndexedRows());\nSystem.out.println(\"Unindexed Rows: \" + stats.getNumUnindexedRows());\nSystem.out.println(\"Index Metadata: \" + stats.getIndexMetadata());\n</code></pre></p>"},{"location":"user-guide/java-sdk/#monitoring-index-creation","title":"Monitoring Index Creation","text":"<p>Wait for Index Completion</p> <p>Index creation is asynchronous. Always wait for indexes to be fully built before running queries to ensure optimal performance and avoid scanning unindexed data.</p> <p>Here's a helper method that combines <code>listTableIndices</code> and <code>describeTableIndexStats</code> to monitor index creation:</p> <pre><code>import java.util.Optional;\n\n/**\n * Wait for index to be fully built with no unindexed rows\n * @param tableName The name of the table\n * @param indexName The expected index name (usually column_name + \"_idx\")\n * @param maxSeconds Maximum seconds to wait\n * @return true if index is complete, false if timeout\n */\nprivate boolean waitForIndexComplete(String tableName, String indexName, int maxSeconds) \n    throws InterruptedException {\n\n    ListTableIndicesRequest listRequest = new ListTableIndicesRequest();\n    listRequest.setName(tableName);\n\n    for (int i = 0; i &lt; maxSeconds; i++) {\n        ListTableIndicesResponse listResponse = namespace.listTableIndices(listRequest);\n        if (listResponse.getIndexes() != null) {\n            Optional&lt;IndexListItemResponse&gt; indexOpt = listResponse.getIndexes().stream()\n                .filter(idx -&gt; idx.getIndexName().equals(indexName))\n                .findFirst();\n\n            if (indexOpt.isPresent()) {\n                DescribeTableIndexStatsRequest statsRequest = new DescribeTableIndexStatsRequest();\n                statsRequest.setName(tableName);\n                DescribeTableIndexStatsResponse stats = namespace.describeTableIndexStats(statsRequest, indexName);\n                if (stats != null &amp;&amp; stats.getNumUnindexedRows() != null \n                    &amp;&amp; stats.getNumUnindexedRows() == 0) {\n                    return true;\n                }\n            }\n        }\n        Thread.sleep(1000);\n    }\n    return false;\n}\n\n// Usage example\nCreateTableIndexResponse response = namespace.createTableIndex(indexRequest);\nboolean indexReady = waitForIndexComplete(\"my_table\", \"embedding_idx\", 60);\nif (!indexReady) {\n    System.out.println(\"Warning: Index creation timed out\");\n}\n</code></pre>"},{"location":"user-guide/java-sdk/#inserting-additional-data","title":"Inserting Additional Data","text":"<pre><code>// Insert more rows into existing table\n// Create Arrow data with same schema as original table\nbyte[] newData = createArrowData(/* new rows */);\n\nInsertIntoTableRequest insertRequest = new InsertIntoTableRequest();\ninsertRequest.setName(\"my_table\");\ninsertRequest.setMode(InsertIntoTableRequest.ModeEnum.APPEND);\nInsertIntoTableResponse insertResponse = namespace.insertIntoTable(insertRequest, newData);\nSystem.out.println(\"Inserted rows, new version: \" + insertResponse.getVersion());\n</code></pre>"},{"location":"user-guide/java-sdk/#counting-rows","title":"Counting Rows","text":"<pre><code>CountTableRowsRequest countRequest = new CountTableRowsRequest();\ncountRequest.setName(\"my_table\");\n\nlong rowCount = namespace.countTableRows(countRequest);\nSystem.out.println(\"Table has \" + rowCount + \" rows\");\n\n// Count with filter\ncountRequest.setFilter(\"id &gt;= 100 AND id &lt; 200\");\nlong filteredCount = namespace.countTableRows(countRequest);\nSystem.out.println(\"Filtered count: \" + filteredCount + \" rows\");\n</code></pre>"},{"location":"user-guide/java-sdk/#updating-data","title":"Updating Data","text":"<pre><code>import com.lancedb.lance.namespace.model.UpdateTableRequest;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\n// Example: Update rows based on condition\nUpdateTableRequest updateRequest = new UpdateTableRequest();\nupdateRequest.setName(\"my_table\");\nupdateRequest.setNamespace(new ArrayList&lt;&gt;());\nupdateRequest.setPredicate(\"id &gt;= 50 AND id &lt;= 60\");\n\nList&lt;List&lt;String&gt;&gt; updates = new ArrayList&lt;&gt;();\n// Note: string values need quotes, numeric values don't\nupdates.add(Arrays.asList(\"some_field\", \"'updated_value'\"));\nupdateRequest.setUpdates(updates);\n\nUpdateTableResponse updateResponse = namespace.updateTable(updateRequest);\nSystem.out.println(\"Updated \" + updateResponse.getUpdatedRows() + \" rows\");\n</code></pre>"},{"location":"user-guide/java-sdk/#deleting-data","title":"Deleting Data","text":"<pre><code>import com.lancedb.lance.namespace.model.DeleteFromTableRequest;\n\n// Delete specific rows\nDeleteFromTableRequest deleteRequest = new DeleteFromTableRequest();\ndeleteRequest.setName(\"my_table\");\ndeleteRequest.setNamespace(new ArrayList&lt;&gt;());\ndeleteRequest.setPredicate(\"id &gt; 900\");\n\nDeleteFromTableResponse deleteResponse = namespace.deleteFromTable(deleteRequest);\nSystem.out.println(\"Deleted rows, new version: \" + deleteResponse.getVersion());\n</code></pre>"},{"location":"user-guide/java-sdk/#describing-a-table","title":"Describing a Table","text":"<pre><code>DescribeTableRequest describeRequest = new DescribeTableRequest();\ndescribeRequest.setName(\"my_table\");\n\nDescribeTableResponse tableInfo = namespace.describeTable(describeRequest);\nSystem.out.println(\"Table location: \" + tableInfo.getLocation());\nSystem.out.println(\"Schema: \" + tableInfo.getSchema());\nSystem.out.println(\"Version: \" + tableInfo.getVersion());\n</code></pre>"},{"location":"user-guide/java-sdk/#merge-insert-upsert","title":"Merge Insert (Upsert)","text":"<pre><code>import com.lancedb.lance.namespace.model.MergeInsertIntoTableRequest;\n\n// Prepare data (similar to create table)\nbyte[] arrowIpcData = prepareArrowData();\n\n// Create merge request\nMergeInsertIntoTableRequest mergeRequest = new MergeInsertIntoTableRequest();\nmergeRequest.setName(\"my_table\");\nmergeRequest.setOn(\"id\");    // match on id column\nmergeRequest.setWhenMatchedUpdateAll(true);    // when_matched_update_all\nmergeRequest.setWhenNotMatchedInsertAll(true); // when_not_matched_insert_all\n\n// Perform merge insert\nMergeInsertIntoTableResponse response = namespace.mergeInsertIntoTable(\n    mergeRequest,\n    arrowIpcData\n);\n\nSystem.out.println(\"Updated rows: \" + response.getNumUpdatedRows());\nSystem.out.println(\"Inserted rows: \" + response.getNumInsertedRows());\n</code></pre>"},{"location":"user-guide/java-sdk/#known-limitation","title":"Known Limitation","text":""},{"location":"user-guide/java-sdk/#not-supported-hybrid-search","title":"Not Supported: Hybrid Search","text":"<p>Hybrid Search requires a vector search and a full text search, cannot run both in one query. Need higher level of search orchestration to provide user level hybrid search operations.</p>"},{"location":"user-guide/java-sdk/#additional-resources","title":"Additional Resources","text":"<ul> <li>API Javadoc</li> <li>Apache Arrow Java Documentation</li> </ul>"}]}